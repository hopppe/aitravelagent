"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/test-job/route";
exports.ids = ["app/api/test-job/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftest-job%2Froute&page=%2Fapi%2Ftest-job%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest-job%2Froute.ts&appDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftest-job%2Froute&page=%2Fapi%2Ftest-job%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest-job%2Froute.ts&appDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_ethanhoppe_Desktop_AItravelagent_app_api_test_job_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/test-job/route.ts */ \"(rsc)/./app/api/test-job/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/test-job/route\",\n        pathname: \"/api/test-job\",\n        filename: \"route\",\n        bundlePath: \"app/api/test-job/route\"\n    },\n    resolvedPagePath: \"/Users/ethanhoppe/Desktop/AItravelagent/app/api/test-job/route.ts\",\n    nextConfigOutput,\n    userland: _Users_ethanhoppe_Desktop_AItravelagent_app_api_test_job_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/test-job/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ0ZXN0LWpvYiUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGdGVzdC1qb2IlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZ0ZXN0LWpvYiUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmV0aGFuaG9wcGUlMkZEZXNrdG9wJTJGQUl0cmF2ZWxhZ2VudCUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZldGhhbmhvcHBlJTJGRGVza3RvcCUyRkFJdHJhdmVsYWdlbnQmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ2lCO0FBQzlGO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktdHJhdmVsLWFnZW50Lz80MzJmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9ldGhhbmhvcHBlL0Rlc2t0b3AvQUl0cmF2ZWxhZ2VudC9hcHAvYXBpL3Rlc3Qtam9iL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS90ZXN0LWpvYi9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3Rlc3Qtam9iXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS90ZXN0LWpvYi9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9ldGhhbmhvcHBlL0Rlc2t0b3AvQUl0cmF2ZWxhZ2VudC9hcHAvYXBpL3Rlc3Qtam9iL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS90ZXN0LWpvYi9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftest-job%2Froute&page=%2Fapi%2Ftest-job%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest-job%2Froute.ts&appDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/test-job/route.ts":
/*!***********************************!*\
  !*** ./app/api/test-job/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/supabase */ \"(rsc)/./lib/supabase.ts\");\n\n\nasync function GET(request) {\n    try {\n        // Generate a test job ID\n        const jobId = `test_job_${Date.now()}`;\n        // Create a job\n        console.log(\"Creating test job:\", jobId);\n        await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createJob)(jobId);\n        // Update job status\n        console.log(\"Updating test job status to processing:\", jobId);\n        await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.updateJobStatus)(jobId, \"processing\");\n        // Check job status\n        console.log(\"Fetching test job status:\", jobId);\n        const job = await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.getJobStatus)(jobId);\n        // Complete the job\n        console.log(\"Completing test job:\", jobId);\n        await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.updateJobStatus)(jobId, \"completed\", {\n            result: {\n                message: \"Test job completed successfully\"\n            }\n        });\n        // Check final status\n        const finalJob = await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.getJobStatus)(jobId);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            message: \"Job system test completed successfully\",\n            initialJob: job,\n            finalJob: finalJob\n        });\n    } catch (error) {\n        console.error(\"Test job error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error.message || \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL3Rlc3Qtam9iL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyQztBQUNzQztBQUcxRSxlQUFlSSxJQUFJQyxPQUFnQjtJQUN4QyxJQUFJO1FBQ0YseUJBQXlCO1FBQ3pCLE1BQU1DLFFBQVEsQ0FBQyxTQUFTLEVBQUVDLEtBQUtDLEdBQUcsR0FBRyxDQUFDO1FBRXRDLGVBQWU7UUFDZkMsUUFBUUMsR0FBRyxDQUFDLHNCQUFzQko7UUFDbEMsTUFBTUwsd0RBQVNBLENBQUNLO1FBRWhCLG9CQUFvQjtRQUNwQkcsUUFBUUMsR0FBRyxDQUFDLDJDQUEyQ0o7UUFDdkQsTUFBTUgsOERBQWVBLENBQUNHLE9BQU87UUFFN0IsbUJBQW1CO1FBQ25CRyxRQUFRQyxHQUFHLENBQUMsNkJBQTZCSjtRQUN6QyxNQUFNSyxNQUFNLE1BQU1ULDJEQUFZQSxDQUFDSTtRQUUvQixtQkFBbUI7UUFDbkJHLFFBQVFDLEdBQUcsQ0FBQyx3QkFBd0JKO1FBQ3BDLE1BQU1ILDhEQUFlQSxDQUFDRyxPQUFPLGFBQWE7WUFDeENNLFFBQVE7Z0JBQUVDLFNBQVM7WUFBa0M7UUFDdkQ7UUFFQSxxQkFBcUI7UUFDckIsTUFBTUMsV0FBVyxNQUFNWiwyREFBWUEsQ0FBQ0k7UUFFcEMsT0FBT04scURBQVlBLENBQUNlLElBQUksQ0FBQztZQUN2QkMsU0FBUztZQUNUSCxTQUFTO1lBQ1RJLFlBQVlOO1lBQ1pHLFVBQVVBO1FBQ1o7SUFDRixFQUFFLE9BQU9JLE9BQVk7UUFDbkJULFFBQVFTLEtBQUssQ0FBQyxtQkFBbUJBO1FBQ2pDLE9BQU9sQixxREFBWUEsQ0FBQ2UsSUFBSSxDQUFDO1lBQ3ZCQyxTQUFTO1lBQ1RFLE9BQU9BLE1BQU1MLE9BQU8sSUFBSTtRQUMxQixHQUFHO1lBQ0RNLFFBQVE7UUFDVjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS10cmF2ZWwtYWdlbnQvLi9hcHAvYXBpL3Rlc3Qtam9iL3JvdXRlLnRzP2I0NTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IHsgY3JlYXRlSm9iLCBnZXRKb2JTdGF0dXMsIHVwZGF0ZUpvYlN0YXR1cyB9IGZyb20gJy4uLy4uLy4uL2xpYi9zdXBhYmFzZSc7XG5pbXBvcnQgeyBnZW5lcmF0ZUpvYklkIH0gZnJvbSAnLi4vam9iLXByb2Nlc3Nvcic7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxdWVzdDogUmVxdWVzdCkge1xuICB0cnkge1xuICAgIC8vIEdlbmVyYXRlIGEgdGVzdCBqb2IgSURcbiAgICBjb25zdCBqb2JJZCA9IGB0ZXN0X2pvYl8ke0RhdGUubm93KCl9YDtcbiAgICBcbiAgICAvLyBDcmVhdGUgYSBqb2JcbiAgICBjb25zb2xlLmxvZygnQ3JlYXRpbmcgdGVzdCBqb2I6Jywgam9iSWQpO1xuICAgIGF3YWl0IGNyZWF0ZUpvYihqb2JJZCk7XG4gICAgXG4gICAgLy8gVXBkYXRlIGpvYiBzdGF0dXNcbiAgICBjb25zb2xlLmxvZygnVXBkYXRpbmcgdGVzdCBqb2Igc3RhdHVzIHRvIHByb2Nlc3Npbmc6Jywgam9iSWQpO1xuICAgIGF3YWl0IHVwZGF0ZUpvYlN0YXR1cyhqb2JJZCwgJ3Byb2Nlc3NpbmcnKTtcbiAgICBcbiAgICAvLyBDaGVjayBqb2Igc3RhdHVzXG4gICAgY29uc29sZS5sb2coJ0ZldGNoaW5nIHRlc3Qgam9iIHN0YXR1czonLCBqb2JJZCk7XG4gICAgY29uc3Qgam9iID0gYXdhaXQgZ2V0Sm9iU3RhdHVzKGpvYklkKTtcbiAgICBcbiAgICAvLyBDb21wbGV0ZSB0aGUgam9iXG4gICAgY29uc29sZS5sb2coJ0NvbXBsZXRpbmcgdGVzdCBqb2I6Jywgam9iSWQpO1xuICAgIGF3YWl0IHVwZGF0ZUpvYlN0YXR1cyhqb2JJZCwgJ2NvbXBsZXRlZCcsIHsgXG4gICAgICByZXN1bHQ6IHsgbWVzc2FnZTogJ1Rlc3Qgam9iIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHknIH0gXG4gICAgfSk7XG4gICAgXG4gICAgLy8gQ2hlY2sgZmluYWwgc3RhdHVzXG4gICAgY29uc3QgZmluYWxKb2IgPSBhd2FpdCBnZXRKb2JTdGF0dXMoam9iSWQpO1xuICAgIFxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgbWVzc2FnZTogJ0pvYiBzeXN0ZW0gdGVzdCBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5JyxcbiAgICAgIGluaXRpYWxKb2I6IGpvYixcbiAgICAgIGZpbmFsSm9iOiBmaW5hbEpvYlxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgY29uc29sZS5lcnJvcignVGVzdCBqb2IgZXJyb3I6JywgZXJyb3IpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlIHx8ICdVbmtub3duIGVycm9yJ1xuICAgIH0sIHsgXG4gICAgICBzdGF0dXM6IDUwMCBcbiAgICB9KTtcbiAgfVxufSAiXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwiY3JlYXRlSm9iIiwiZ2V0Sm9iU3RhdHVzIiwidXBkYXRlSm9iU3RhdHVzIiwiR0VUIiwicmVxdWVzdCIsImpvYklkIiwiRGF0ZSIsIm5vdyIsImNvbnNvbGUiLCJsb2ciLCJqb2IiLCJyZXN1bHQiLCJtZXNzYWdlIiwiZmluYWxKb2IiLCJqc29uIiwic3VjY2VzcyIsImluaXRpYWxKb2IiLCJlcnJvciIsInN0YXR1cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/api/test-job/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createJob: () => (/* binding */ createJob),\n/* harmony export */   getJobStatus: () => (/* binding */ getJobStatus),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   updateJobStatus: () => (/* binding */ updateJobStatus)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n// Explicitly log all environment variables for debugging\nconsole.log(\"NODE_ENV:\", \"development\");\nconsole.log(\"Environment Variables Overview:\", {\n    hasProcessEnv: typeof process !== \"undefined\" && !!process.env,\n    nodeEnv: \"development\",\n    hasSbUrl: \"NEXT_PUBLIC_SUPABASE_URL\" in process.env,\n    hasSbKey: \"NEXT_PUBLIC_SUPABASE_ANON_KEY\" in process.env,\n    nextConfig: \"string\" === \"string\",\n    envVarCount: Object.keys(process.env).filter((key)=>key.startsWith(\"NEXT_\")).length\n});\n// Supabase client setup\n// Directly access variables for debugging rather than using || '' pattern initially\nlet supabaseUrl = \"https://toaiekqwflojwicejvne.supabase.co\";\nlet supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvYWlla3F3ZmxvandpY2Vqdm5lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ5MzM2MzMsImV4cCI6MjA2MDUwOTYzM30.E70hBHGjbvCJPjYpMmlMIMvyfyBlotOwP01YaXf37Mg\";\n// Debug Supabase setup without exposing keys\nconsole.log(\"Direct Supabase URL:\", supabaseUrl?.substring(0, 12) + \"...\" || 0);\nconsole.log(\"Direct Supabase Key:\", supabaseAnonKey?.substring(0, 6) + \"...\" || 0);\n// Fallback to empty string if undefined\nsupabaseUrl = supabaseUrl || \"\";\nsupabaseAnonKey = supabaseAnonKey || \"\";\n// Debug Supabase setup without exposing keys\nconsole.log(\"Supabase configuration check:\", {\n    hasUrl: Boolean(supabaseUrl),\n    urlLength: supabaseUrl?.length || 0,\n    urlPrefix: supabaseUrl?.substring(0, 8) || \"\",\n    hasKey: Boolean(supabaseAnonKey),\n    keyLength: supabaseAnonKey?.length || 0,\n    keyPrefix: supabaseAnonKey?.substring(0, 4) || \"\"\n});\n// Check if Supabase is configured properly\nconst isSupabaseConfigured = Boolean(supabaseUrl && supabaseAnonKey);\n// In-memory store to track if Supabase connectivity failed during runtime\nlet supabaseDisabled = false;\n// Initialize the Supabase client with explicit options for better reliability\nconst supabase = isSupabaseConfigured ? (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n    auth: {\n        persistSession: false,\n        autoRefreshToken: false\n    },\n    global: {\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    },\n    db: {\n        schema: \"public\"\n    }\n}) : (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://placeholder-url.supabase.co\", \"placeholder-key\", {\n    auth: {\n        persistSession: false,\n        autoRefreshToken: false\n    }\n});\n// Log initialization status\nif (!isSupabaseConfigured) {\n    console.log(\"Supabase not properly configured. Using in-memory job storage as fallback.\");\n} else {\n    console.log(\"Supabase client initialized, verifying connection...\");\n    // Attempt to verify connection and ensure the jobs table exists\n    verifySupabaseConnection().catch((err)=>{\n        console.warn(\"Failed to verify Supabase connection:\", err.message);\n    });\n}\n// In-memory fallback store for development or when Supabase isn't configured\nconst inMemoryJobs = {};\n// Function to verify the Supabase connection\nasync function verifySupabaseConnection() {\n    if (!isSupabaseConfigured) return;\n    try {\n        console.log(\"Checking Supabase connection...\");\n        // First try to directly query if the jobs table exists\n        const { data, error } = await supabase.from(\"jobs\").select(\"*\").limit(1);\n        if (error) {\n            // Table might not exist\n            if (error.code === \"42P01\") {\n                console.log(\"Jobs table does not exist, will attempt to create it\");\n                await ensureJobsTableExists();\n            } else {\n                console.error(\"Supabase connection verification failed:\", {\n                    message: error.message,\n                    code: error.code,\n                    details: error.details\n                });\n            }\n        } else {\n            console.log(\"Supabase connection verified successfully, jobs table exists\");\n            // Check to see if we have the right columns\n            await checkTableStructure(data);\n        }\n    } catch (error) {\n        console.error(\"Error verifying Supabase connection:\", {\n            message: error.message,\n            stack: error.stack?.substring(0, 200)\n        });\n        // If this is a network error, disable Supabase\n        if (error.message?.includes(\"fetch failed\") || error.message?.includes(\"network error\") || error instanceof TypeError) {\n            console.warn(\"Disabling Supabase due to connection issues\");\n            supabaseDisabled = true;\n        }\n    }\n}\n// Check and adapt to existing table structure\nasync function checkTableStructure(sampleData) {\n    if (sampleData && sampleData.length > 0) {\n        // Log the structure we found for debugging\n        const firstRow = sampleData[0];\n        console.log(\"Found existing jobs table with columns:\", Object.keys(firstRow).join(\", \"));\n    }\n}\n// Function to check and create the jobs table if it doesn't exist\nasync function ensureJobsTableExists() {\n    if (!isSupabaseConfigured) return;\n    try {\n        console.log(\"Attempting to create jobs table...\");\n        // Check if we have permission to execute SQL\n        try {\n            // First, try to create a simple table with the minimum required fields\n            const createTableSQL = `\n        CREATE TABLE IF NOT EXISTS jobs (\n          id BIGINT PRIMARY KEY,\n          status TEXT,\n          result JSONB,\n          error TEXT,\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n        );\n      `;\n            const { error: createError } = await supabase.rpc(\"execute_sql\", {\n                sql: createTableSQL\n            });\n            if (createError) {\n                console.error(\"Failed to create jobs table via SQL:\", createError);\n                // Try an alternative approach - using the insert API\n                console.log(\"Trying to create jobs table via insert...\");\n                const { error: insertError } = await supabase.from(\"jobs\").insert({\n                    id: 0,\n                    status: \"test\",\n                    result: null,\n                    error: null,\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                });\n                if (insertError) {\n                    // If Supabase doesn't let us create the table, log what needs to be created\n                    console.error(\"Cannot create jobs table automatically:\", insertError);\n                    console.error(\"Please create the jobs table manually with this SQL:\");\n                    console.error(createTableSQL);\n                } else {\n                    console.log(\"Jobs table created successfully through insert\");\n                    // Clean up test record\n                    await supabase.from(\"jobs\").delete().eq(\"id\", 0);\n                }\n            } else {\n                console.log(\"Jobs table created successfully through SQL\");\n            }\n        } catch (sqlError) {\n            console.error(\"Error executing SQL:\", sqlError.message);\n        }\n    } catch (error) {\n        console.error(\"Error ensuring jobs table exists:\", error.message);\n    // This error is handled gracefully, we'll just use in-memory storage\n    }\n}\n// Convert string ID to a numeric hash if needed for Supabase compatibility\nfunction getDbCompatibleId(id) {\n    // If the ID is already numeric, return it as is\n    if (!isNaN(Number(id))) {\n        return Number(id);\n    }\n    // For job IDs that start with a timestamp (job_ or debug_), extract the timestamp\n    // This ensures consistent ID generation across environments\n    const timestampMatch = id.match(/^(job|debug|test)_(\\d+)/);\n    if (timestampMatch && !isNaN(Number(timestampMatch[2]))) {\n        // Use the timestamp portion as the numeric ID\n        return Number(timestampMatch[2]);\n    }\n    // For any other IDs, use a hash function to generate a numeric ID\n    // This is useful for non-standard job IDs\n    let hash = 0;\n    const prime = 31; // Use a prime number for better distribution\n    for(let i = 0; i < id.length; i++){\n        // Get the character code\n        const char = id.charCodeAt(i);\n        // Multiply the current hash by the prime and add the character code\n        hash = Math.imul(hash, prime) + char | 0;\n    }\n    // Ensure positive number by using absolute value and make it large enough to avoid collisions\n    return Math.abs(hash);\n}\n// Check if Supabase should be used\nfunction shouldUseSupabase() {\n    return isSupabaseConfigured && !supabaseDisabled;\n}\n// Handle Supabase errors consistently\nfunction handleSupabaseError(error) {\n    console.error(\"Supabase operation failed:\", {\n        message: error.message,\n        name: error.name,\n        code: error.code,\n        hint: error.hint,\n        details: error.details,\n        isTypeError: error instanceof TypeError\n    });\n    // If we get a fetch error, disable Supabase for this session\n    if (error instanceof TypeError && (error.message?.includes(\"fetch failed\") || error.message?.includes(\"network error\"))) {\n        console.warn(\"Disabling Supabase due to connectivity issues. Using in-memory storage as fallback.\");\n        supabaseDisabled = true;\n    }\n}\n// Function to create or update a job\nasync function updateJobStatus(jobId, status, data) {\n    // Create in-memory fallback entry\n    const memoryJob = {\n        id: jobId,\n        status: status,\n        result: data?.result || undefined,\n        error: data?.error || undefined,\n        created_at: inMemoryJobs[jobId]?.created_at || new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    };\n    // Save to in-memory store\n    inMemoryJobs[jobId] = memoryJob;\n    // If we shouldn't use Supabase, return early with success\n    if (!shouldUseSupabase()) {\n        return true;\n    }\n    try {\n        const dbId = getDbCompatibleId(jobId);\n        // Ensure result is properly serialized before sending to Supabase\n        let safeResult = null;\n        if (data?.result) {\n            try {\n                // Log coordinates before serialization if they exist\n                if (data.result?.itinerary?.days) {\n                    console.log(\"Checking coordinates before serialization...\");\n                    const days = data.result.itinerary.days;\n                    let hasCoordinateIssues = false;\n                    for(let i = 0; i < days.length; i++){\n                        const day = days[i];\n                        if (day.activities && Array.isArray(day.activities)) {\n                            for(let j = 0; j < day.activities.length; j++){\n                                const activity = day.activities[j];\n                                if (!activity.coordinates || typeof activity.coordinates !== \"object\") {\n                                    console.error(`Missing coordinates in day ${i}, activity ${j}: ${activity.title}`);\n                                    hasCoordinateIssues = true;\n                                } else {\n                                    if (activity.coordinates.lat === undefined || activity.coordinates.lng === undefined) {\n                                        console.error(`Incomplete coordinates in day ${i}, activity ${j}: ${JSON.stringify(activity.coordinates)}`);\n                                        hasCoordinateIssues = true;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (!hasCoordinateIssues) {\n                        console.log(\"All coordinates look valid before serialization\");\n                    }\n                }\n                // Test serialization first to catch any issues\n                JSON.stringify(data.result);\n                safeResult = data.result;\n            } catch (e) {\n                console.error(\"Failed to serialize job result to JSON:\", e);\n                safeResult = {\n                    error: \"Result contained unserializable data\"\n                };\n            }\n        }\n        console.log(`Updating job ${jobId} (dbId: ${dbId}) status to ${status}`);\n        // First, get the current job to preserve created_at\n        let created_at = memoryJob.created_at;\n        try {\n            const { data: existingJob } = await supabase.from(\"jobs\").select(\"created_at\").eq(\"id\", dbId).single();\n            if (existingJob?.created_at) {\n                created_at = existingJob.created_at;\n                console.log(`Using existing created_at timestamp: ${created_at}`);\n            } else {\n                console.log(`No existing created_at found, using default created_at: ${created_at}`);\n            }\n        } catch (err) {\n            console.log(`Could not fetch existing job, using default created_at: ${created_at}`);\n        }\n        // Now update with the preserved created_at\n        const { error } = await supabase.from(\"jobs\").upsert({\n            id: dbId,\n            status,\n            result: safeResult,\n            error: data?.error || null,\n            created_at: created_at,\n            updated_at: new Date().toISOString()\n        }, {\n            onConflict: \"id\"\n        });\n        if (error) {\n            console.error(\"Error updating job status in Supabase:\", {\n                code: error.code,\n                message: error.message,\n                details: error.details,\n                jobId,\n                dbId,\n                status\n            });\n        } else {\n            console.log(`Successfully updated job ${jobId} in Supabase`);\n        }\n    } catch (error) {\n        handleSupabaseError(error);\n    }\n    // Always return true since we saved to in-memory storage\n    return true;\n}\n// Get the status of a job\nasync function getJobStatus(jobId) {\n    // Enhanced logging for troubleshooting\n    console.log(`========== JOB STATUS CHECK ==========`);\n    console.log(`getJobStatus called for job: ${jobId}`);\n    console.log(`Environment: ${\"development\"}`);\n    console.log(`Supabase configured: ${isSupabaseConfigured}`);\n    console.log(`Supabase disabled flag: ${supabaseDisabled}`);\n    console.log(`shouldUseSupabase(): ${shouldUseSupabase()}`);\n    // Check in-memory storage first\n    const memoryJob = inMemoryJobs[jobId];\n    // Log in-memory job status\n    console.log(`In-memory job status for ${jobId}: ${memoryJob ? memoryJob.status : \"not found\"}`);\n    console.log(`In-memory jobs count: ${Object.keys(inMemoryJobs).length}`);\n    console.log(`All in-memory job IDs: ${Object.keys(inMemoryJobs).join(\", \").substring(0, 200)}`);\n    // Not even in memory\n    if (!memoryJob) {\n        console.log(`Job ${jobId} not found in memory, will check Supabase if available`);\n        // If Supabase is properly configured and not disabled, try to fetch from there\n        if (shouldUseSupabase()) {\n            try {\n                const dbId = getDbCompatibleId(jobId);\n                console.log(`Checking Supabase for job ${jobId} (DB ID: ${dbId})`);\n                const { data, error } = await supabase.from(\"jobs\").select(\"*\").eq(\"id\", dbId).maybeSingle();\n                if (error) {\n                    console.error(`Supabase error checking for job ${jobId}:`, {\n                        message: error.message,\n                        code: error.code,\n                        details: error.details\n                    });\n                    return {\n                        status: \"not_found\"\n                    };\n                }\n                if (!data) {\n                    console.log(`Job ${jobId} not found in Supabase either`);\n                    return {\n                        status: \"not_found\"\n                    };\n                }\n                console.log(`Found job ${jobId} in Supabase with status: ${data.status}`);\n                // Store in memory for future quick access\n                inMemoryJobs[jobId] = {\n                    id: jobId,\n                    status: data.status,\n                    result: data.result,\n                    error: data.error,\n                    created_at: data.created_at,\n                    updated_at: data.updated_at\n                };\n                return {\n                    status: data.status,\n                    result: data.result,\n                    error: data.error\n                };\n            } catch (error) {\n                console.error(`Exception checking Supabase for job ${jobId}:`, {\n                    message: error.message,\n                    stack: error.stack?.substring(0, 200)\n                });\n                return {\n                    status: \"not_found\"\n                };\n            }\n        } else {\n            console.log(`Supabase not available, job ${jobId} is not found`);\n            return {\n                status: \"not_found\"\n            };\n        }\n    }\n    // If Supabase is disabled or improperly configured, only use in-memory storage\n    if (!shouldUseSupabase()) {\n        console.log(`Using in-memory data for job ${jobId} (Supabase not available)`);\n        return {\n            status: memoryJob.status,\n            result: memoryJob.result,\n            error: memoryJob.error\n        };\n    }\n    // Add retry logic for fetching status from Supabase\n    const maxRetries = 3;\n    let attempts = 0;\n    while(attempts < maxRetries){\n        try {\n            const dbId = getDbCompatibleId(jobId);\n            console.log(`Fetching job status for ${jobId} (dbId: ${dbId}) from Supabase (attempt ${attempts + 1})`);\n            const { data, error } = await supabase.from(\"jobs\").select(\"*\").eq(\"id\", dbId).maybeSingle();\n            if (error) {\n                console.error(\"Error retrieving job status from Supabase:\", {\n                    message: error.message,\n                    code: error.code,\n                    details: error.details,\n                    jobId,\n                    dbId,\n                    attempt: attempts + 1\n                });\n                attempts++;\n                if (attempts < maxRetries) {\n                    // Wait before retrying (exponential backoff)\n                    await new Promise((resolve)=>setTimeout(resolve, 500 * Math.pow(2, attempts)));\n                    continue;\n                }\n                // Fall back to in-memory after all retries\n                console.log(`All ${maxRetries} attempts to fetch job from Supabase failed, using in-memory data`);\n                handleSupabaseError(error);\n                return {\n                    status: memoryJob.status,\n                    result: memoryJob.result,\n                    error: memoryJob.error\n                };\n            }\n            if (!data) {\n                console.log(`Job ${jobId} not found in Supabase, using in-memory data`);\n                // Not found in DB but in memory, return memory version\n                return {\n                    status: memoryJob.status,\n                    result: memoryJob.result,\n                    error: memoryJob.error\n                };\n            }\n            console.log(`Successfully retrieved job ${jobId} status from Supabase: ${data.status}`);\n            // Update in-memory store to keep in sync\n            inMemoryJobs[jobId] = {\n                id: jobId,\n                status: data.status,\n                result: data.result,\n                error: data.error,\n                created_at: data.created_at,\n                updated_at: data.updated_at\n            };\n            return {\n                status: data.status,\n                result: data.result,\n                error: data.error\n            };\n        } catch (error) {\n            attempts++;\n            console.error(`Error fetching job status (attempt ${attempts}):`, {\n                message: error.message,\n                stack: error.stack?.substring(0, 200),\n                jobId,\n                attempt: attempts\n            });\n            if (attempts < maxRetries) {\n                // Wait before retrying (exponential backoff)\n                await new Promise((resolve)=>setTimeout(resolve, 500 * Math.pow(2, attempts)));\n                continue;\n            }\n            // All retries failed, fall back to in-memory\n            handleSupabaseError(error);\n            console.log(`Falling back to in-memory data for job ${jobId} after ${maxRetries} failed Supabase attempts`);\n            return {\n                status: memoryJob.status,\n                result: memoryJob.result,\n                error: memoryJob.error\n            };\n        }\n    }\n    // This should never be reached due to the returns in the loop, but TypeScript needs it\n    console.log(`Code reached unreachable point in getJobStatus for job ${jobId}`);\n    return {\n        status: memoryJob.status,\n        result: memoryJob.result,\n        error: memoryJob.error\n    };\n}\n// Function to create a new job\nasync function createJob(jobId) {\n    // Get a DB-compatible ID\n    const dbId = getDbCompatibleId(jobId);\n    console.log(`Creating job ${jobId} (DB ID: ${dbId})`);\n    // Always create the job in memory first for redundancy\n    inMemoryJobs[jobId] = {\n        id: jobId,\n        status: \"queued\",\n        updated_at: new Date().toISOString()\n    };\n    console.log(`Job ${jobId} created in memory`);\n    // If Supabase is disabled, just return success from in-memory storage\n    if (!shouldUseSupabase()) {\n        console.log(`Using in-memory storage only for job ${jobId}`);\n        return true;\n    }\n    try {\n        console.log(`Inserting job ${jobId} into Supabase`);\n        // Try to insert the job into Supabase\n        const { error } = await supabase.from(\"jobs\").insert({\n            id: dbId,\n            status: \"queued\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        });\n        if (error) {\n            console.error(`Error creating job ${jobId} in Supabase:`, {\n                message: error.message,\n                code: error.code,\n                details: error.details\n            });\n            // For conflicts, the job might already exist\n            if (error.code === \"23505\") {\n                console.log(`Job ${jobId} already exists in Supabase, updating status instead`);\n                // Try to update the job instead\n                const { error: updateError } = await supabase.from(\"jobs\").update({\n                    status: \"queued\",\n                    updated_at: new Date().toISOString()\n                }).eq(\"id\", dbId);\n                if (updateError) {\n                    console.error(`Error updating existing job ${jobId} in Supabase:`, updateError);\n                    // Even if update fails, we have the job in memory\n                    handleSupabaseError(updateError);\n                    return true;\n                } else {\n                    console.log(`Successfully updated job ${jobId} in Supabase`);\n                    return true;\n                }\n            }\n            // For foreign key constraint failures, try to create with minimal fields\n            if (error.code === \"23503\") {\n                console.log(`Trying simplified job creation for ${jobId}`);\n                const { error: simpleError } = await supabase.from(\"jobs\").insert({\n                    id: dbId,\n                    status: \"queued\"\n                });\n                if (simpleError) {\n                    console.error(`Simplified job creation also failed for ${jobId}:`, simpleError);\n                    handleSupabaseError(simpleError);\n                    return true; // Still return true since we have in-memory backup\n                } else {\n                    console.log(`Simplified job creation succeeded for ${jobId}`);\n                    return true;\n                }\n            }\n            // For other errors, handle gracefully and use in-memory storage as fallback\n            handleSupabaseError(error);\n            return true; // Still return true since we have in-memory backup\n        }\n        console.log(`Successfully created job ${jobId} in Supabase`);\n        return true;\n    } catch (error) {\n        console.error(`Exception while creating job ${jobId}:`, {\n            message: error.message,\n            stack: error.stack?.substring(0, 200)\n        });\n        // In case of network or other exception, we already have the job in memory\n        handleSupabaseError(error);\n        return true; // Still return true since we have in-memory backup\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftest-job%2Froute&page=%2Fapi%2Ftest-job%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest-job%2Froute.ts&appDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();
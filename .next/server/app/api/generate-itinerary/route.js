"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/generate-itinerary/route";
exports.ids = ["app/api/generate-itinerary/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-itinerary%2Froute&page=%2Fapi%2Fgenerate-itinerary%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-itinerary%2Froute.ts&appDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-itinerary%2Froute&page=%2Fapi%2Fgenerate-itinerary%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-itinerary%2Froute.ts&appDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_ethanhoppe_Desktop_AItravelagent_app_api_generate_itinerary_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/generate-itinerary/route.ts */ \"(rsc)/./app/api/generate-itinerary/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/generate-itinerary/route\",\n        pathname: \"/api/generate-itinerary\",\n        filename: \"route\",\n        bundlePath: \"app/api/generate-itinerary/route\"\n    },\n    resolvedPagePath: \"/Users/ethanhoppe/Desktop/AItravelagent/app/api/generate-itinerary/route.ts\",\n    nextConfigOutput,\n    userland: _Users_ethanhoppe_Desktop_AItravelagent_app_api_generate_itinerary_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/generate-itinerary/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZnZW5lcmF0ZS1pdGluZXJhcnklMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmdlbmVyYXRlLWl0aW5lcmFyeSUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmdlbmVyYXRlLWl0aW5lcmFyeSUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmV0aGFuaG9wcGUlMkZEZXNrdG9wJTJGQUl0cmF2ZWxhZ2VudCUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZldGhhbmhvcHBlJTJGRGVza3RvcCUyRkFJdHJhdmVsYWdlbnQmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQzJCO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktdHJhdmVsLWFnZW50Lz80Y2UyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9ldGhhbmhvcHBlL0Rlc2t0b3AvQUl0cmF2ZWxhZ2VudC9hcHAvYXBpL2dlbmVyYXRlLWl0aW5lcmFyeS9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZ2VuZXJhdGUtaXRpbmVyYXJ5L3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvZ2VuZXJhdGUtaXRpbmVyYXJ5XCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9nZW5lcmF0ZS1pdGluZXJhcnkvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvZXRoYW5ob3BwZS9EZXNrdG9wL0FJdHJhdmVsYWdlbnQvYXBwL2FwaS9nZW5lcmF0ZS1pdGluZXJhcnkvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2dlbmVyYXRlLWl0aW5lcmFyeS9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-itinerary%2Froute&page=%2Fapi%2Fgenerate-itinerary%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-itinerary%2Froute.ts&appDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/generate-itinerary/route.ts":
/*!*********************************************!*\
  !*** ./app/api/generate-itinerary/route.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   generatePrompt: () => (/* binding */ generatePrompt),\n/* harmony export */   maxDuration: () => (/* binding */ maxDuration),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _job_processor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../job-processor */ \"(rsc)/./app/api/job-processor.ts\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/supabase */ \"(rsc)/./lib/supabase.ts\");\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/logger */ \"(rsc)/./lib/logger.ts\");\n\n\n\n\n// Initialize logger\nconst logger = (0,_lib_logger__WEBPACK_IMPORTED_MODULE_3__.createLogger)(\"generate-itinerary\");\n// Configure runtime for serverless function - using edge for more consistent timeout behavior\nconst runtime = \"nodejs\";\nconst maxDuration = 60; // Set max duration to 60 seconds\n// Check if running in production environment\nconst isProduction = \"development\" === \"production\";\n// Check if Supabase is properly configured\nconst isSupabaseConfigured = Boolean( true && \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvYWlla3F3ZmxvandpY2Vqdm5lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ5MzM2MzMsImV4cCI6MjA2MDUwOTYzM30.E70hBHGjbvCJPjYpMmlMIMvyfyBlotOwP01YaXf37Mg\");\nasync function POST(request) {\n    try {\n        // Log key information for debugging\n        logger.info(`========== ITINERARY GENERATION REQUEST ==========`);\n        logger.info(`API Request started: ${new Date().toISOString()}`);\n        logger.info(\"Environment:\", {\n            nodeEnv: \"development\",\n            isProduction: \"development\" === \"production\"\n        });\n        // Log environment variables (without exposing actual values)\n        logger.info(\"Supabase connection details:\", {\n            hasSupabaseUrl: !!\"https://toaiekqwflojwicejvne.supabase.co\",\n            hasSupabaseKey: !!\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvYWlla3F3ZmxvandpY2Vqdm5lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ5MzM2MzMsImV4cCI6MjA2MDUwOTYzM30.E70hBHGjbvCJPjYpMmlMIMvyfyBlotOwP01YaXf37Mg\",\n            urlPrefix: \"https://toaiekqwflojwicejvne.supabase.co\"?.substring(0, 10) || 0,\n            keyPrefix: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvYWlla3F3ZmxvandpY2Vqdm5lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ5MzM2MzMsImV4cCI6MjA2MDUwOTYzM30.E70hBHGjbvCJPjYpMmlMIMvyfyBlotOwP01YaXf37Mg\"?.substring(0, 5) || 0,\n            urlLength: \"https://toaiekqwflojwicejvne.supabase.co\"?.length || 0,\n            keyLength: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvYWlla3F3ZmxvandpY2Vqdm5lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ5MzM2MzMsImV4cCI6MjA2MDUwOTYzM30.E70hBHGjbvCJPjYpMmlMIMvyfyBlotOwP01YaXf37Mg\"?.length || 0\n        });\n        // Only test Supabase connection if properly configured\n        if (isSupabaseConfigured) {\n            try {\n                logger.info(\"Testing Supabase connection...\");\n                const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from(\"jobs\").select(\"*\").limit(1);\n                if (error) {\n                    logger.error(\"❌ Supabase connection test failed:\", {\n                        message: error.message,\n                        hint: error.hint || \"\",\n                        code: error.code || \"\"\n                    });\n                } else {\n                    logger.info(\"✅ Supabase connection test successful\");\n                }\n            } catch (connError) {\n                logger.error(\"❌ Supabase connection test exception:\", {\n                    message: connError.message,\n                    details: connError.toString(),\n                    name: connError.name,\n                    stack: connError.stack?.substring(0, 200)\n                });\n            }\n        } else {\n            logger.warn(\"⚠️ Skipping Supabase connection test - not configured\");\n        }\n        // Parse the request body\n        const surveyData = await request.json();\n        logger.info(\"Received survey data:\", {\n            destination: surveyData.destination,\n            startDate: surveyData.startDate,\n            endDate: surveyData.endDate,\n            purpose: surveyData.purpose,\n            budget: surveyData.budget,\n            preferences: surveyData.preferences\n        });\n        // Create a unique job ID\n        const jobId = (0,_job_processor__WEBPACK_IMPORTED_MODULE_1__.generateJobId)();\n        logger.info(`Generated new job ID: ${jobId}`);\n        // Generate the prompt on the server side\n        const prompt = generatePrompt(surveyData);\n        logger.info(`Generated prompt for job ${jobId}, length: ${prompt.length} characters`);\n        // If we're in development or testing, return mock data immediately\n        if ( true && process.env.USE_MOCK_DATA === \"true\") {\n            logger.info(\"Development mode with mock data: Returning mock data\");\n            const mockItinerary = createMockItinerary(surveyData);\n            const updateResult = await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_2__.updateJobStatus)(jobId, \"completed\", {\n                result: {\n                    itinerary: mockItinerary,\n                    prompt: prompt\n                }\n            });\n            if (!updateResult) {\n                logger.error(\"Failed to update job status in development mode\");\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Failed to update job status\"\n                }, {\n                    status: 500\n                });\n            }\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                jobId,\n                status: \"completed\"\n            });\n        }\n        // Create a new job in Supabase\n        logger.info(\"Creating new job with ID:\", jobId);\n        let jobCreated = false;\n        let retryCount = 0;\n        const maxRetries = 3;\n        // Add retry logic for job creation\n        while(!jobCreated && retryCount < maxRetries){\n            try {\n                jobCreated = await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_2__.createJob)(jobId);\n                if (!jobCreated) {\n                    logger.error(`Failed to create job on attempt ${retryCount + 1}/${maxRetries}`);\n                    retryCount++;\n                    if (retryCount < maxRetries) {\n                        // Exponential backoff\n                        await new Promise((resolve)=>setTimeout(resolve, 500 * Math.pow(2, retryCount)));\n                    }\n                }\n            } catch (error) {\n                logger.error(`Error creating job on attempt ${retryCount + 1}/${maxRetries}:`, error);\n                retryCount++;\n                if (retryCount < maxRetries) {\n                    // Exponential backoff\n                    await new Promise((resolve)=>setTimeout(resolve, 500 * Math.pow(2, retryCount)));\n                }\n            }\n        }\n        if (!jobCreated) {\n            logger.error(\"Failed to create job after multiple attempts\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Failed to create job in database after multiple attempts\"\n            }, {\n                status: 500\n            });\n        }\n        logger.info(`Job ${jobId} created successfully, current status: queued`);\n        // Verify the job was created properly by fetching its status\n        let statusCheck;\n        try {\n            statusCheck = await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_2__.getJobStatus)(jobId);\n            logger.info(`Initial job status check: ${statusCheck.status}`);\n            if (statusCheck.status === \"not_found\") {\n                logger.error(`Critical error: Job ${jobId} was not found immediately after creation`);\n                // Try to recreate the job one more time in case of race condition\n                jobCreated = await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_2__.createJob)(jobId);\n                if (jobCreated) {\n                    logger.info(`Job ${jobId} recreated successfully after initial not_found status`);\n                    statusCheck = await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_2__.getJobStatus)(jobId);\n                    logger.info(`Second job status check: ${statusCheck.status}`);\n                }\n            }\n        } catch (statusCheckError) {\n            logger.error(\"Error checking initial job status:\", statusCheckError);\n        }\n        // Call the Supabase Edge Function to process the itinerary\n        try {\n            logger.info(`Invoking Supabase Edge Function for job ${jobId}`);\n            // Update job status to processing\n            await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_2__.updateJobStatus)(jobId, \"processing\");\n            if (!isSupabaseConfigured) {\n                throw new Error(\"Supabase URL or key is missing\");\n            }\n            // Invoke the Edge Function with the generated prompt\n            const { data: functionData, error: functionError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.functions.invoke(\"generate-itinerary\", {\n                body: {\n                    jobId,\n                    surveyData,\n                    prompt\n                }\n            });\n            if (functionError) {\n                logger.error(`Error invoking Supabase Edge Function:`, functionError);\n                throw new Error(`Edge Function error: ${functionError.message || \"Unknown error\"}`);\n            }\n            logger.info(`Supabase Edge Function invoked successfully for job ${jobId}:`, functionData);\n            // If the edge function returned a result directly, process it\n            if (functionData && functionData.result) {\n                logger.info(`Processing immediate result from edge function for job ${jobId}`);\n                await (0,_job_processor__WEBPACK_IMPORTED_MODULE_1__.processItineraryResponse)(jobId, functionData.result);\n            }\n        } catch (edgeFunctionError) {\n            logger.error(`Failed to invoke Supabase Edge Function:`, edgeFunctionError);\n            // Update job status to reflect the error but don't fail the response\n            // We want the client to keep polling the job status\n            await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_2__.updateJobStatus)(jobId, \"processing\", {\n                error: `Edge function invocation error (will retry): ${edgeFunctionError.message || \"Unknown error\"}`\n            });\n        }\n        // Return immediately with the job ID\n        logger.info(`Returning response for job ${jobId} with status: processing`);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            jobId,\n            status: \"processing\",\n            message: \"Your itinerary is being generated. Poll the job-status endpoint for updates.\"\n        });\n    } catch (error) {\n        logger.error(\"Error initiating itinerary generation:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: `Failed to initiate itinerary generation: ${error.message || \"Unknown error\"}`\n        }, {\n            status: 500\n        });\n    }\n}\n// Function to generate a prompt based on survey data\nfunction generatePrompt(surveyData) {\n    // Calculate trip duration - adding 1 to include both start and end date\n    const startDate = new Date(surveyData.startDate);\n    const endDate = new Date(surveyData.endDate);\n    // Set time to noon to avoid timezone issues\n    startDate.setHours(12, 0, 0, 0);\n    endDate.setHours(12, 0, 0, 0);\n    // Calculate number of days\n    const tripDuration = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n    // Format dates for display\n    const formattedStartDate = formatDate(startDate);\n    const formattedEndDate = formatDate(endDate);\n    // Build the preferences section\n    let preferencesText = \"\";\n    if (surveyData.preferences && surveyData.preferences.length > 0) {\n        preferencesText = \"The traveler has expressed interest in the following: \" + surveyData.preferences.join(\", \") + \". \";\n    }\n    // Construct the prompt\n    return `\nCreate a personalized travel itinerary for a trip to ${surveyData.destination} from ${formattedStartDate} to ${formattedEndDate} (${tripDuration} days).\n\nTrip purpose: ${surveyData.purpose}\nBudget level: ${surveyData.budget}\n${preferencesText}\n\nGenerate a comprehensive day-by-day travel itinerary with the following structure (as a valid JSON object):\n\n{\n  \"destination\": \"${surveyData.destination}\",\n  \"tripName\": \"<create a catchy name for this trip>\",\n  \"dates\": {\n    \"start\": \"${surveyData.startDate}\",\n    \"end\": \"${surveyData.endDate}\"\n  },\n  \"summary\": \"<brief overview of the trip highlighting key attractions and experiences>\",\n  \"days\": [\n    {\n      \"day\": 1,\n      \"date\": \"${surveyData.startDate}\",\n      \"activities\": [\n        {\n          \"time\": \"<morning/afternoon/evening>\",\n          \"title\": \"<activity name>\",\n          \"description\": \"<detailed description>\",\n          \"location\": \"<specific location name>\",\n          \"coordinates\": {\n            \"lat\": <latitude as number>,\n            \"lng\": <longitude as number>\n          },\n          \"duration\": \"<estimated duration>\",\n          \"cost\": \"<cost estimate or budget level>\"\n        },\n        ... more activities ...\n      ]\n    },\n    ... more days ...\n  ],\n  \"budgetEstimate\": {\n    \"accommodation\": <estimated total cost as number>,\n    \"food\": <estimated total cost as number>,\n    \"activities\": <estimated total cost as number>,\n    \"transportation\": <estimated total cost as number>,\n    \"total\": <total estimated cost as number>\n  },\n  \"travelTips\": [\n    \"<useful tip for this destination>\",\n    ... more tips ...\n  ]\n}\n\nRemember, EACH activity MUST include valid and accurate coordinates (latitude and longitude) as numerical values - never use empty or placeholder coordinates. Research real locations in ${surveyData.destination} and include their actual coordinates.\n\nOnly return valid JSON that can be parsed with JSON.parse(). Do not include any explanations, markdown formatting, or code blocks outside the JSON object. Ensure all property names and string values use double quotes, not single quotes.\n  `;\n}\n// Format date for display\nfunction formatDate(date) {\n    const months = [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\"\n    ];\n    const day = date.getDate();\n    const month = months[date.getMonth()];\n    const year = date.getFullYear();\n    // Add suffix to day\n    let suffix = \"th\";\n    if (day === 1 || day === 21 || day === 31) suffix = \"st\";\n    else if (day === 2 || day === 22) suffix = \"nd\";\n    else if (day === 3 || day === 23) suffix = \"rd\";\n    return `${month} ${day}${suffix}, ${year}`;\n}\n// Helper function to create mock data for development testing\nfunction createMockItinerary(surveyData) {\n    return {\n        destination: surveyData.destination,\n        tripName: `${surveyData.purpose} trip to ${surveyData.destination}`,\n        dates: {\n            start: surveyData.startDate,\n            end: surveyData.endDate\n        },\n        summary: `A ${surveyData.budget} ${surveyData.purpose} adventure in ${surveyData.destination}, featuring ${surveyData.preferences.join(\", \")}.`,\n        days: [\n            {\n                day: 1,\n                date: surveyData.startDate,\n                activities: [\n                    {\n                        time: \"morning\",\n                        title: \"Breakfast at local cafe\",\n                        description: \"Start your day with a delicious local breakfast\",\n                        location: \"Central Cafe\",\n                        coordinates: {\n                            lat: 48.8566,\n                            lng: 2.3522\n                        },\n                        duration: \"1 hour\",\n                        cost: \"moderate\"\n                    },\n                    {\n                        time: \"afternoon\",\n                        title: \"City Tour\",\n                        description: \"Explore the main attractions of the city\",\n                        location: \"City Center\",\n                        coordinates: {\n                            lat: 48.8584,\n                            lng: 2.3536\n                        },\n                        duration: \"3 hours\",\n                        cost: surveyData.budget\n                    }\n                ]\n            },\n            {\n                day: 2,\n                date: new Date(new Date(surveyData.startDate).setDate(new Date(surveyData.startDate).getDate() + 1)).toISOString().split(\"T\")[0],\n                activities: [\n                    {\n                        time: \"morning\",\n                        title: \"Museum Visit\",\n                        description: \"Visit the famous local museum\",\n                        location: \"National Museum\",\n                        coordinates: {\n                            lat: 48.8606,\n                            lng: 2.3376\n                        },\n                        duration: \"2 hours\",\n                        cost: surveyData.budget\n                    }\n                ]\n            }\n        ],\n        budgetEstimate: {\n            accommodation: 500,\n            food: 300,\n            activities: 200,\n            transportation: 100,\n            total: 1100\n        },\n        travelTips: [\n            \"Pack comfortable walking shoes\",\n            \"Try the local specialty dishes\",\n            \"Learn a few phrases in the local language\"\n        ]\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/generate-itinerary/route.ts\n");

/***/ }),

/***/ "(rsc)/./app/api/job-processor.ts":
/*!**********************************!*\
  !*** ./app/api/job-processor.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ensureValidCoordinates: () => (/* binding */ ensureValidCoordinates),\n/* harmony export */   generateJobId: () => (/* binding */ generateJobId),\n/* harmony export */   processItineraryJob: () => (/* binding */ processItineraryJob),\n/* harmony export */   processItineraryResponse: () => (/* binding */ processItineraryResponse),\n/* harmony export */   sanitizeJSON: () => (/* binding */ sanitizeJSON)\n/* harmony export */ });\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/supabase */ \"(rsc)/./lib/supabase.ts\");\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/logger */ \"(rsc)/./lib/logger.ts\");\n\n\n// Create a logger for the job processor\nconst logger = (0,_lib_logger__WEBPACK_IMPORTED_MODULE_1__.createLogger)(\"job-processor\");\n// Helper function to generate a unique job ID\nfunction generateJobId() {\n    return `job_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n}\n// Function to sanitize JSON - fixes common JSON syntax issues\nfunction sanitizeJSON(content) {\n    logger.debug(\"Sanitizing JSON content\");\n    // Remove JavaScript-style comments\n    let sanitized = content.replace(/\\/\\/.*?(\\r?\\n|$)/g, \"$1\").replace(/\\/\\*[\\s\\S]*?\\*\\//g, \"\");\n    // Fix property names without quotes\n    sanitized = sanitized.replace(/(\\{|\\,)\\s*([a-zA-Z0-9_]+)\\s*\\:/g, '$1\"$2\":');\n    // Remove trailing commas\n    sanitized = sanitized.replace(/,(\\s*[\\]\\}])/g, \"$1\");\n    // Replace single quotes with double quotes\n    sanitized = sanitized.replace(/'/g, '\"');\n    return sanitized;\n}\n// Ensure valid coordinates in the itinerary\nfunction ensureValidCoordinates(itinerary) {\n    logger.debug(\"Validating and fixing coordinates in itinerary\");\n    // Default backup coordinates for Paris (use as last resort)\n    const defaultCoordinates = {\n        lat: 48.8566,\n        lng: 2.3522\n    };\n    // Helper to validate a single coordinates object\n    const isValidCoordinates = (coords)=>{\n        return coords && typeof coords === \"object\" && typeof coords.lat === \"number\" && typeof coords.lng === \"number\" && !isNaN(coords.lat) && !isNaN(coords.lng);\n    };\n    // If there are no days, nothing to do\n    if (!itinerary.days || !Array.isArray(itinerary.days)) {\n        logger.warn(\"No days array found in itinerary\");\n        return itinerary;\n    }\n    // Track issues found\n    let issuesFound = 0;\n    // Check each day and activity\n    itinerary.days.forEach((day, dayIndex)=>{\n        if (!day.activities || !Array.isArray(day.activities)) {\n            logger.warn(`Day ${dayIndex + 1} has no activities array`);\n            return;\n        }\n        day.activities.forEach((activity, activityIndex)=>{\n            // Skip if there's no activity object\n            if (!activity || typeof activity !== \"object\") {\n                logger.warn(`Invalid activity at day ${dayIndex + 1}, index ${activityIndex}`);\n                return;\n            }\n            // Check if coordinates exist and are valid\n            if (!isValidCoordinates(activity.coordinates)) {\n                issuesFound++;\n                logger.warn(`Invalid coordinates found for activity \"${activity.title}\" on day ${dayIndex + 1}`, {\n                    coordinates: activity.coordinates,\n                    activityIndex,\n                    dayIndex\n                });\n                // If the coordinates exist but are invalid, try to fix them\n                if (activity.coordinates && typeof activity.coordinates === \"object\") {\n                    // Try to convert string values to numbers\n                    if (typeof activity.coordinates.lat === \"string\") {\n                        activity.coordinates.lat = parseFloat(activity.coordinates.lat);\n                    }\n                    if (typeof activity.coordinates.lng === \"string\") {\n                        activity.coordinates.lng = parseFloat(activity.coordinates.lng);\n                    }\n                    // If still invalid, use default\n                    if (!isValidCoordinates(activity.coordinates)) {\n                        activity.coordinates = {\n                            ...defaultCoordinates\n                        };\n                    }\n                } else {\n                    // No coordinates or completely invalid, use default\n                    activity.coordinates = {\n                        ...defaultCoordinates\n                    };\n                }\n                logger.debug(`Fixed coordinates for activity \"${activity.title}\"`, activity.coordinates);\n            }\n        });\n    });\n    if (issuesFound > 0) {\n        logger.info(`Fixed ${issuesFound} coordinate issues in itinerary`);\n    } else {\n        logger.debug(\"All coordinates in itinerary are valid\");\n    }\n    return itinerary;\n}\n// Parse and process the OpenAI response from Edge Function\nasync function processItineraryResponse(jobId, contentData) {\n    try {\n        logger.info(`Processing itinerary response for job ${jobId}`);\n        if (!contentData || !contentData.rawContent) {\n            logger.error(`Invalid response data for job ${jobId}`);\n            await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.updateJobStatus)(jobId, \"failed\", {\n                error: \"Invalid response data from Supabase edge function\"\n            });\n            return false;\n        }\n        const itineraryContent = contentData.rawContent;\n        logger.debug(`Content length for job ${jobId}: ${itineraryContent.length} characters`);\n        // Parse the JSON response with error handling\n        try {\n            logger.debug(`Parsing JSON response for job ${jobId}`);\n            // Try direct parse first\n            let itinerary;\n            try {\n                itinerary = JSON.parse(itineraryContent);\n                logger.info(`JSON for job ${jobId} parsed successfully on first attempt`);\n            } catch (err) {\n                const parseError = err;\n                logger.error(`Initial JSON parse failed for job ${jobId}:`, parseError.message);\n                // First try to extract JSON content from the response\n                const jsonMatch = itineraryContent.match(/\\{[\\s\\S]*\\}/);\n                if (jsonMatch) {\n                    try {\n                        logger.debug(`Attempting to extract JSON from response for job ${jobId}`);\n                        itinerary = JSON.parse(jsonMatch[0]);\n                        logger.info(`JSON extracted and parsed successfully for job ${jobId}`);\n                    } catch (err2) {\n                        const extractError = err2;\n                        logger.error(`Failed to extract valid JSON for job ${jobId}:`, extractError.message);\n                        // Try to sanitize and repair the JSON\n                        try {\n                            logger.debug(`Attempting to sanitize and repair the JSON for job ${jobId}`);\n                            const sanitizedJSON = sanitizeJSON(itineraryContent);\n                            itinerary = JSON.parse(sanitizedJSON);\n                            logger.info(`Sanitized JSON parsed successfully for job ${jobId}`);\n                        } catch (err3) {\n                            throw parseError; // Fallback to the original error\n                        }\n                    }\n                } else {\n                    throw parseError;\n                }\n            }\n            // Quick validation of the itinerary\n            if (!itinerary || typeof itinerary !== \"object\") {\n                throw new Error(\"Parsed result is not a valid object\");\n            }\n            logger.debug(`Validating coordinates for job ${jobId}`);\n            // Ensure coordinates exist for all activities\n            ensureValidCoordinates(itinerary);\n            logger.info(`Coordinates validated successfully for job ${jobId}`);\n            // Update job status with the successful result\n            logger.info(`Updating job ${jobId} status to completed`);\n            await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.updateJobStatus)(jobId, \"completed\", {\n                result: {\n                    itinerary,\n                    prompt: contentData.prompt,\n                    generatedAt: new Date().toISOString()\n                }\n            });\n            logger.info(`Job ${jobId} completed successfully`);\n            return true;\n        } catch (parseError) {\n            logger.error(`JSON parsing error for job ${jobId}:`, {\n                message: parseError.message,\n                stack: parseError.stack?.substring(0, 200)\n            });\n            // Content may be too long to include in logs, write to a debug file in development\n            if (true) {\n                try {\n                    const fs = __webpack_require__(/*! fs */ \"fs\");\n                    fs.writeFileSync(`debug-job-${jobId}.txt`, itineraryContent);\n                    logger.debug(`Wrote debug content to debug-job-${jobId}.txt`);\n                } catch (fsError) {\n                    logger.error(`Failed to write debug file for job ${jobId}:`, fsError);\n                }\n            }\n            // Update job status to failed\n            await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.updateJobStatus)(jobId, \"failed\", {\n                error: `Failed to parse itinerary JSON: ${parseError.message}`\n            });\n            logger.info(`Job ${jobId} failed due to JSON parsing error`);\n            return false;\n        }\n    } catch (error) {\n        logger.error(`Error processing itinerary job ${jobId}:`, {\n            message: error.message,\n            stack: error.stack?.substring(0, 200)\n        });\n        await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.updateJobStatus)(jobId, \"failed\", {\n            error: error.message || \"Unknown error\"\n        });\n        return false;\n    }\n}\n// Process itinerary job by making a direct OpenAI API call\nasync function processItineraryJob(jobId, surveyData, promptGenerator, apiKey) {\n    try {\n        logger.info(`Processing itinerary job for job ${jobId}`);\n        // Use the provided prompt or generate one using the generator function\n        let prompt;\n        if (typeof promptGenerator === \"function\") {\n            prompt = promptGenerator(surveyData);\n            logger.debug(`Generated prompt for job ${jobId}, length: ${prompt.length} characters`);\n        } else {\n            prompt = promptGenerator;\n            logger.debug(`Using pre-formulated prompt for job ${jobId}, length: ${prompt.length} characters`);\n        }\n        // Call OpenAI API directly\n        logger.info(`Calling OpenAI API for job ${jobId}`);\n        const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${apiKey}`\n            },\n            body: JSON.stringify({\n                model: \"gpt-3.5-turbo\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: 'You are an expert travel planner. Generate a detailed travel itinerary based on the user\\'s preferences. Return your response in a structured JSON format only, with no additional text, explanation, or markdown formatting. Do not wrap the JSON in code blocks. Ensure all property names use double quotes. IMPORTANT: Every activity MUST include a valid \"coordinates\" object with \"lat\" and \"lng\" numerical values - never omit coordinates or use empty objects. For price fields, DO NOT use $ symbols directly - use price descriptors like \"Budget\", \"Moderate\", \"Expensive\" or numeric values without currency symbols.'\n                    },\n                    {\n                        role: \"user\",\n                        content: prompt\n                    }\n                ],\n                temperature: 0.7,\n                max_tokens: 3000\n            })\n        });\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(`OpenAI API error: ${error.error?.message || \"Unknown error\"}`);\n        }\n        const openAIData = await response.json();\n        const rawContent = openAIData.choices[0].message.content;\n        // Process the raw response\n        await processItineraryResponse(jobId, {\n            rawContent,\n            prompt,\n            usage: openAIData.usage\n        });\n        return true;\n    } catch (error) {\n        logger.error(`Failed to process itinerary job ${jobId}:`, error);\n        // Update job status to failed\n        await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.updateJobStatus)(jobId, \"failed\", {\n            error: `OpenAI API error: ${error.message || \"Unknown error\"}`\n        });\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/job-processor.ts\n");

/***/ }),

/***/ "(rsc)/./lib/logger.ts":
/*!***********************!*\
  !*** ./lib/logger.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createLogger: () => (/* binding */ createLogger),\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n// Advanced logger utility for structured logging with context\n\n\n\n// Configure log file path - default to logs directory in project root\nconst LOG_DIR = process.env.LOG_DIR || \"logs\";\nconst LOG_FILE = process.env.LOG_FILE || \"app.log\";\nconst MAX_LOG_SIZE = 5 * 1024 * 1024; // 5MB max log file size\nconst LOG_LEVEL = process.env.LOG_LEVEL || \"info\";\n// Ensure log directory exists\ntry {\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(LOG_DIR)) {\n        fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(LOG_DIR, {\n            recursive: true\n        });\n    }\n} catch (err) {\n    console.error(\"Failed to create log directory:\", err);\n}\n// Define log levels as numbers for comparisons\nconst logLevelValues = {\n    debug: 0,\n    info: 1,\n    warn: 2,\n    error: 3\n};\n/**\n * Write log to file with rotation\n */ function writeToFile(message) {\n    try {\n        const logPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(LOG_DIR, LOG_FILE);\n        // Check if log file exists and if it's too large\n        if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(logPath)) {\n            const stats = fs__WEBPACK_IMPORTED_MODULE_0___default().statSync(logPath);\n            if (stats.size > MAX_LOG_SIZE) {\n                // Create backup of current log file with timestamp\n                const timestamp = new Date().toISOString().replace(/:/g, \"-\");\n                const backupPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(LOG_DIR, `${LOG_FILE}.${timestamp}.backup`);\n                fs__WEBPACK_IMPORTED_MODULE_0___default().renameSync(logPath, backupPath);\n            }\n        }\n        (0,fs__WEBPACK_IMPORTED_MODULE_0__.appendFileSync)(logPath, message + \"\\n\");\n    } catch (err) {\n        console.error(\"Failed to write to log file:\", err);\n    }\n}\n/**\n * Format object for logging - handles circular refs and formats nicely\n */ function formatObject(obj) {\n    try {\n        // Remove circular references\n        const seen = new WeakSet();\n        const safeObj = JSON.stringify(obj, (key, value)=>{\n            if (typeof value === \"object\" && value !== null) {\n                if (seen.has(value)) {\n                    return \"[Circular]\";\n                }\n                seen.add(value);\n            }\n            return value;\n        }, 2);\n        return safeObj;\n    } catch (err) {\n        return `[Unformattable Object: ${err}]`;\n    }\n}\n/**\n * Main logger function\n */ function logWithLevel(level, context, message, ...args) {\n    // Skip logs below current level\n    if (logLevelValues[level] < logLevelValues[LOG_LEVEL]) {\n        return;\n    }\n    const timestamp = new Date().toISOString();\n    const formattedArgs = args.map((arg)=>typeof arg === \"object\" && arg !== null ? formatObject(arg) : String(arg)).join(\" \");\n    const logEntry = `[${timestamp}] [${level.toUpperCase()}] [${context}] ${message} ${formattedArgs}`;\n    // Always log to console for immediate feedback\n    if (level === \"error\") {\n        console.error(logEntry);\n    } else if (level === \"warn\") {\n        console.warn(logEntry);\n    } else {\n        console.log(logEntry);\n    }\n    // Also write to log file\n    writeToFile(logEntry);\n}\n/**\n * Create a logger for a specific context\n */ function createLogger(context) {\n    return {\n        debug: (message, ...args)=>logWithLevel(\"debug\", context, message, ...args),\n        info: (message, ...args)=>logWithLevel(\"info\", context, message, ...args),\n        warn: (message, ...args)=>logWithLevel(\"warn\", context, message, ...args),\n        error: (message, ...args)=>logWithLevel(\"error\", context, message, ...args)\n    };\n}\n// Export a default logger\nconst logger = createLogger(\"app\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/logger.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   countJobsByStatus: () => (/* binding */ countJobsByStatus),\n/* harmony export */   createJob: () => (/* binding */ createJob),\n/* harmony export */   getInMemoryJobs: () => (/* binding */ getInMemoryJobs),\n/* harmony export */   getJobStatus: () => (/* binding */ getJobStatus),\n/* harmony export */   getRecentJobs: () => (/* binding */ getRecentJobs),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   updateJobStatus: () => (/* binding */ updateJobStatus)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger */ \"(rsc)/./lib/logger.ts\");\n\n\n// Create a logger for the Supabase module\nconst logger = (0,_logger__WEBPACK_IMPORTED_MODULE_0__.createLogger)(\"supabase\");\n// Explicitly log all environment variables for debugging\nlogger.info(\"Supabase initialization\", {\n    NODE_ENV: \"development\",\n    hasProcessEnv: typeof process !== \"undefined\" && !!process.env,\n    nodeEnv: \"development\",\n    hasSbUrl: \"NEXT_PUBLIC_SUPABASE_URL\" in process.env,\n    hasSbKey: \"NEXT_PUBLIC_SUPABASE_ANON_KEY\" in process.env,\n    nextConfig: \"string\" === \"string\",\n    envVarCount: Object.keys(process.env).filter((key)=>key.startsWith(\"NEXT_\")).length\n});\n// Supabase client setup\n// Directly access variables for debugging rather than using || '' pattern initially\nlet supabaseUrl = \"https://toaiekqwflojwicejvne.supabase.co\";\nlet supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvYWlla3F3ZmxvandpY2Vqdm5lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ5MzM2MzMsImV4cCI6MjA2MDUwOTYzM30.E70hBHGjbvCJPjYpMmlMIMvyfyBlotOwP01YaXf37Mg\";\n// Debug Supabase setup without exposing keys\nlogger.debug(\"Supabase credentials\", {\n    urlPrefix: supabaseUrl?.substring(0, 12) + \"...\" || 0,\n    keyPrefix: supabaseAnonKey?.substring(0, 6) + \"...\" || 0\n});\n// Fallback to empty string if undefined\nsupabaseUrl = supabaseUrl || \"\";\nsupabaseAnonKey = supabaseAnonKey || \"\";\n// Debug Supabase setup without exposing keys\nlogger.info(\"Supabase configuration check\", {\n    hasUrl: Boolean(supabaseUrl),\n    urlLength: supabaseUrl?.length || 0,\n    urlPrefix: supabaseUrl?.substring(0, 8) || \"\",\n    hasKey: Boolean(supabaseAnonKey),\n    keyLength: supabaseAnonKey?.length || 0,\n    keyPrefix: supabaseAnonKey?.substring(0, 4) || \"\"\n});\n// Check if Supabase is configured properly\nconst isSupabaseConfigured = Boolean(supabaseUrl && supabaseAnonKey);\n// In-memory store to track if Supabase connectivity failed during runtime\nlet supabaseDisabled = false;\n// Initialize the Supabase client with explicit options for better reliability\nconst supabase = isSupabaseConfigured ? (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(supabaseUrl, supabaseAnonKey, {\n    auth: {\n        persistSession: false,\n        autoRefreshToken: false\n    },\n    global: {\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    },\n    db: {\n        schema: \"public\"\n    }\n}) : (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(\"https://placeholder-url.supabase.co\", \"placeholder-key\", {\n    auth: {\n        persistSession: false,\n        autoRefreshToken: false\n    }\n});\n// Log initialization status\nif (!isSupabaseConfigured) {\n    logger.warn(\"Supabase not properly configured. Using in-memory job storage as fallback.\");\n} else {\n    logger.info(\"Supabase client initialized, verifying connection...\");\n    // Attempt to verify connection and ensure the jobs table exists\n    verifySupabaseConnection().catch((err)=>{\n        logger.error(\"Failed to verify Supabase connection:\", err.message);\n    });\n}\n// In-memory fallback store for development or when Supabase isn't configured\nconst inMemoryJobs = {};\n// Function to verify the Supabase connection\nasync function verifySupabaseConnection() {\n    if (!isSupabaseConfigured) return;\n    try {\n        logger.info(\"Checking Supabase connection...\");\n        // First try to directly query if the jobs table exists\n        const { data, error } = await supabase.from(\"jobs\").select(\"*\").limit(1);\n        if (error) {\n            // Table might not exist\n            if (error.code === \"42P01\") {\n                logger.warn(\"Jobs table does not exist, will attempt to create it\");\n                await ensureJobsTableExists();\n            } else {\n                logger.error(\"Supabase connection verification failed:\", {\n                    message: error.message,\n                    code: error.code,\n                    details: error.details\n                });\n            }\n        } else {\n            logger.info(\"Supabase connection verified successfully, jobs table exists\");\n            // Check to see if we have the right columns\n            await checkTableStructure(data);\n        }\n    } catch (error) {\n        logger.error(\"Error verifying Supabase connection:\", {\n            message: error.message,\n            stack: error.stack?.substring(0, 200)\n        });\n        // If this is a network error, disable Supabase\n        if (error.message?.includes(\"fetch failed\") || error.message?.includes(\"network error\") || error instanceof TypeError) {\n            logger.warn(\"Disabling Supabase due to connection issues\");\n            supabaseDisabled = true;\n        }\n    }\n}\n// Check and adapt to existing table structure\nasync function checkTableStructure(sampleData) {\n    if (sampleData && sampleData.length > 0) {\n        // Log the structure we found for debugging\n        const firstRow = sampleData[0];\n        logger.debug(\"Found existing jobs table with columns:\", Object.keys(firstRow).join(\", \"));\n    }\n}\n// Function to check and create the jobs table if it doesn't exist\nasync function ensureJobsTableExists() {\n    if (!isSupabaseConfigured) return;\n    try {\n        logger.info(\"Attempting to create jobs table...\");\n        // Check if we have permission to execute SQL\n        try {\n            // First, try to create a simple table with the minimum required fields\n            const createTableSQL = `\n        CREATE TABLE IF NOT EXISTS jobs (\n          id BIGINT PRIMARY KEY,\n          status TEXT,\n          result JSONB,\n          error TEXT,\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n        );\n      `;\n            const { error: createError } = await supabase.rpc(\"execute_sql\", {\n                sql: createTableSQL\n            });\n            if (createError) {\n                logger.error(\"Failed to create jobs table via SQL:\", createError);\n                // Try an alternative approach - using the insert API\n                logger.info(\"Trying to create jobs table via insert...\");\n                const { error: insertError } = await supabase.from(\"jobs\").insert({\n                    id: 0,\n                    status: \"test\",\n                    result: null,\n                    error: null,\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                });\n                if (insertError) {\n                    // If Supabase doesn't let us create the table, log what needs to be created\n                    logger.error(\"Cannot create jobs table automatically:\", insertError);\n                    logger.error(\"Please create the jobs table manually with this SQL:\");\n                    logger.error(createTableSQL);\n                } else {\n                    logger.info(\"Jobs table created successfully through insert\");\n                    // Clean up test record\n                    await supabase.from(\"jobs\").delete().eq(\"id\", 0);\n                }\n            } else {\n                logger.info(\"Jobs table created successfully through SQL\");\n            }\n        } catch (sqlError) {\n            logger.error(\"Error executing SQL:\", sqlError.message);\n        }\n    } catch (error) {\n        logger.error(\"Error ensuring jobs table exists:\", error);\n    }\n}\n// Helper function to convert job ID to database-compatible ID\nfunction getDbCompatibleId(id) {\n    // If the ID is already numeric, return it as is\n    if (!isNaN(Number(id))) {\n        return Number(id);\n    }\n    // For job IDs that start with a timestamp (job_ or debug_), extract the timestamp\n    const timestampMatch = id.match(/^(job|debug|test)_(\\d+)/);\n    if (timestampMatch && !isNaN(Number(timestampMatch[2]))) {\n        // Use the timestamp portion as the numeric ID\n        return Number(timestampMatch[2]);\n    }\n    // For any other IDs, use a hash function to generate a numeric ID\n    let hash = 0;\n    const prime = 31; // Use a prime number for better distribution\n    for(let i = 0; i < id.length; i++){\n        // Get the character code\n        const char = id.charCodeAt(i);\n        // Multiply the current hash by the prime and add the character code\n        hash = Math.imul(hash, prime) + char | 0;\n    }\n    // Ensure positive number by using absolute value\n    return Math.abs(hash);\n}\n// Helper function to determine if we should use Supabase\nfunction shouldUseSupabase() {\n    return isSupabaseConfigured && !supabaseDisabled;\n}\n// Helper function to handle and log Supabase errors\nfunction handleSupabaseError(error) {\n    logger.error(\"Supabase operation failed:\", {\n        message: error.message,\n        code: error.code,\n        details: error.details || error.stack?.substring(0, 200)\n    });\n    // If this is a network error, disable Supabase for future operations\n    if (error.message?.includes(\"fetch failed\") || error.message?.includes(\"network error\") || error instanceof TypeError) {\n        logger.warn(\"Disabling Supabase due to connection issues\");\n        supabaseDisabled = true;\n    }\n}\n// Update the status of a job\nasync function updateJobStatus(jobId, status, data) {\n    const updateTime = new Date().toISOString();\n    const dbId = getDbCompatibleId(jobId);\n    logger.info(`Updating job status: ${jobId} -> ${status}`, {\n        dbId,\n        hasResult: !!data?.result,\n        hasError: !!data?.error\n    });\n    if (shouldUseSupabase()) {\n        try {\n            const updateData = {\n                status,\n                updated_at: updateTime\n            };\n            if (data) {\n                if (data.result !== undefined) {\n                    updateData.result = data.result;\n                }\n                if (data.error !== undefined) {\n                    updateData.error = data.error;\n                }\n            }\n            logger.debug(`Supabase update job ${jobId} with data:`, updateData);\n            // Implement retry logic for job updates\n            let retries = 0;\n            const maxRetries = 3;\n            let success = false;\n            while(retries < maxRetries && !success){\n                const { error } = await supabase.from(\"jobs\").update(updateData).eq(\"id\", dbId);\n                if (error) {\n                    logger.warn(`Failed to update job status (attempt ${retries + 1}):`, error);\n                    retries++;\n                    if (retries < maxRetries) {\n                        // Wait a bit before retrying (exponential backoff)\n                        await new Promise((resolve)=>setTimeout(resolve, 200 * Math.pow(2, retries)));\n                    } else {\n                        handleSupabaseError(error);\n                        break;\n                    }\n                } else {\n                    logger.info(`Job ${jobId} status updated successfully to ${status}`);\n                    success = true;\n                }\n            }\n            return success;\n        } catch (error) {\n            handleSupabaseError(error);\n            // Fallback to in-memory storage\n            logger.info(`Falling back to in-memory storage for job ${jobId}`);\n        }\n    }\n    // Fallback to in-memory storage if Supabase is not available\n    if (!inMemoryJobs[jobId]) {\n        inMemoryJobs[jobId] = {\n            id: jobId,\n            status: status,\n            updated_at: updateTime\n        };\n    } else {\n        inMemoryJobs[jobId].status = status;\n        inMemoryJobs[jobId].updated_at = updateTime;\n    }\n    if (data) {\n        if (data.result !== undefined) {\n            inMemoryJobs[jobId].result = data.result;\n        }\n        if (data.error !== undefined) {\n            inMemoryJobs[jobId].error = data.error;\n        }\n    }\n    logger.info(`Updated in-memory job ${jobId} status to ${status}`);\n    return true;\n}\n// Get the status of a job\nasync function getJobStatus(jobId) {\n    const dbId = getDbCompatibleId(jobId);\n    logger.info(`Getting status for job: ${jobId} (db id: ${dbId})`);\n    if (shouldUseSupabase()) {\n        try {\n            logger.debug(`Querying Supabase for job ${jobId}`);\n            // Implement retry logic for job status fetching\n            let retries = 0;\n            const maxRetries = 3;\n            while(retries < maxRetries){\n                const { data, error } = await supabase.from(\"jobs\").select(\"status, result, error, updated_at\").eq(\"id\", dbId).single();\n                if (error) {\n                    logger.warn(`Failed to get job status (attempt ${retries + 1}):`, error);\n                    retries++;\n                    if (retries < maxRetries) {\n                        // Wait a bit before retrying (exponential backoff)\n                        await new Promise((resolve)=>setTimeout(resolve, 200 * Math.pow(2, retries)));\n                    } else {\n                        handleSupabaseError(error);\n                        break;\n                    }\n                } else if (data) {\n                    logger.info(`Job ${jobId} status retrieved: ${data.status}`, {\n                        hasResult: !!data.result,\n                        hasError: !!data.error,\n                        updatedAt: data.updated_at\n                    });\n                    return {\n                        status: data.status,\n                        result: data.result,\n                        error: data.error\n                    };\n                } else {\n                    logger.warn(`Job ${jobId} not found in database`);\n                    break;\n                }\n            }\n            // At this point, either we hit max retries or no data was found\n            // Try fallback to in-memory storage\n            logger.info(`Supabase lookup failed, checking in-memory storage for job ${jobId}`);\n        } catch (error) {\n            handleSupabaseError(error);\n            logger.info(`Falling back to in-memory storage for job ${jobId} after error`);\n        }\n    }\n    // Fallback to in-memory storage\n    if (inMemoryJobs[jobId]) {\n        logger.info(`Found job ${jobId} in memory with status: ${inMemoryJobs[jobId].status}`);\n        return {\n            status: inMemoryJobs[jobId].status,\n            result: inMemoryJobs[jobId].result,\n            error: inMemoryJobs[jobId].error\n        };\n    }\n    logger.warn(`Job ${jobId} not found in any storage`);\n    return {\n        status: \"not_found\"\n    };\n}\n// Create a new job\nasync function createJob(jobId) {\n    const dbId = getDbCompatibleId(jobId);\n    const timestamp = new Date().toISOString();\n    logger.info(`Creating new job: ${jobId} (db id: ${dbId})`);\n    if (shouldUseSupabase()) {\n        try {\n            // Implement retry logic for job creation\n            let retries = 0;\n            const maxRetries = 3;\n            let success = false;\n            while(retries < maxRetries && !success){\n                // Try to insert a new job\n                const { error } = await supabase.from(\"jobs\").insert({\n                    id: dbId,\n                    status: \"queued\",\n                    created_at: timestamp,\n                    updated_at: timestamp\n                });\n                if (error) {\n                    logger.warn(`Failed to create job (attempt ${retries + 1}):`, error);\n                    retries++;\n                    if (retries < maxRetries) {\n                        // Wait a bit before retrying (exponential backoff)\n                        await new Promise((resolve)=>setTimeout(resolve, 200 * Math.pow(2, retries)));\n                    } else {\n                        handleSupabaseError(error);\n                        break;\n                    }\n                } else {\n                    logger.info(`Job ${jobId} created successfully`);\n                    success = true;\n                }\n            }\n            if (success) {\n                return true;\n            }\n            // If we get here, we hit max retries\n            logger.info(`Supabase job creation failed after retries, falling back to in-memory`);\n        } catch (error) {\n            handleSupabaseError(error);\n            logger.info(`Falling back to in-memory storage for job ${jobId} creation`);\n        }\n    }\n    // Fallback to in-memory storage\n    inMemoryJobs[jobId] = {\n        id: jobId,\n        status: \"queued\",\n        created_at: timestamp,\n        updated_at: timestamp\n    };\n    logger.info(`Created in-memory job ${jobId}`);\n    return true;\n}\n// Export the in-memory jobs for debugging\nfunction getInMemoryJobs() {\n    return {\n        ...inMemoryJobs\n    };\n}\n// Function to count jobs by status - useful for diagnostics\nasync function countJobsByStatus() {\n    if (shouldUseSupabase()) {\n        try {\n            logger.debug(\"Counting jobs by status from Supabase\");\n            // Fetch all jobs\n            const { data, error } = await supabase.from(\"jobs\").select(\"status\").order(\"created_at\", {\n                ascending: false\n            }).limit(500);\n            if (error) {\n                handleSupabaseError(error);\n            } else if (data) {\n                // Count jobs by status\n                const statusCounts = {};\n                data.forEach((job)=>{\n                    statusCounts[job.status] = (statusCounts[job.status] || 0) + 1;\n                });\n                logger.info(\"Job count by status:\", statusCounts);\n                return statusCounts;\n            }\n        } catch (error) {\n            handleSupabaseError(error);\n        }\n    }\n    // Fallback to in-memory count\n    const statusCounts = {};\n    Object.values(inMemoryJobs).forEach((job)=>{\n        statusCounts[job.status] = (statusCounts[job.status] || 0) + 1;\n    });\n    logger.info(\"In-memory job count by status:\", statusCounts);\n    return statusCounts;\n}\n// Get recent jobs for diagnostics\nasync function getRecentJobs(limit = 50) {\n    if (shouldUseSupabase()) {\n        try {\n            logger.debug(`Fetching ${limit} recent jobs from Supabase`);\n            const { data, error } = await supabase.from(\"jobs\").select(\"*\").order(\"created_at\", {\n                ascending: false\n            }).limit(limit);\n            if (error) {\n                handleSupabaseError(error);\n            } else if (data) {\n                logger.info(`Retrieved ${data.length} recent jobs from Supabase`);\n                return data;\n            }\n        } catch (error) {\n            handleSupabaseError(error);\n        }\n    }\n    // Fallback to in-memory jobs\n    const jobs = Object.values(inMemoryJobs).sort((a, b)=>(b.created_at || \"\").localeCompare(a.created_at || \"\")).slice(0, limit);\n    logger.info(`Retrieved ${jobs.length} recent jobs from in-memory storage`);\n    return jobs;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-itinerary%2Froute&page=%2Fapi%2Fgenerate-itinerary%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-itinerary%2Froute.ts&appDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();
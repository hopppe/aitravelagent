"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/generate-itinerary/route";
exports.ids = ["app/api/generate-itinerary/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-itinerary%2Froute&page=%2Fapi%2Fgenerate-itinerary%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-itinerary%2Froute.ts&appDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-itinerary%2Froute&page=%2Fapi%2Fgenerate-itinerary%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-itinerary%2Froute.ts&appDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_ethanhoppe_Desktop_AItravelagent_app_api_generate_itinerary_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/generate-itinerary/route.ts */ \"(rsc)/./app/api/generate-itinerary/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/generate-itinerary/route\",\n        pathname: \"/api/generate-itinerary\",\n        filename: \"route\",\n        bundlePath: \"app/api/generate-itinerary/route\"\n    },\n    resolvedPagePath: \"/Users/ethanhoppe/Desktop/AItravelagent/app/api/generate-itinerary/route.ts\",\n    nextConfigOutput,\n    userland: _Users_ethanhoppe_Desktop_AItravelagent_app_api_generate_itinerary_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/generate-itinerary/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZnZW5lcmF0ZS1pdGluZXJhcnklMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmdlbmVyYXRlLWl0aW5lcmFyeSUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmdlbmVyYXRlLWl0aW5lcmFyeSUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmV0aGFuaG9wcGUlMkZEZXNrdG9wJTJGQUl0cmF2ZWxhZ2VudCUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZldGhhbmhvcHBlJTJGRGVza3RvcCUyRkFJdHJhdmVsYWdlbnQmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQzJCO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktdHJhdmVsLWFnZW50Lz80Y2UyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9ldGhhbmhvcHBlL0Rlc2t0b3AvQUl0cmF2ZWxhZ2VudC9hcHAvYXBpL2dlbmVyYXRlLWl0aW5lcmFyeS9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZ2VuZXJhdGUtaXRpbmVyYXJ5L3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvZ2VuZXJhdGUtaXRpbmVyYXJ5XCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9nZW5lcmF0ZS1pdGluZXJhcnkvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvZXRoYW5ob3BwZS9EZXNrdG9wL0FJdHJhdmVsYWdlbnQvYXBwL2FwaS9nZW5lcmF0ZS1pdGluZXJhcnkvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2dlbmVyYXRlLWl0aW5lcmFyeS9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-itinerary%2Froute&page=%2Fapi%2Fgenerate-itinerary%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-itinerary%2Froute.ts&appDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/generate-itinerary/route.ts":
/*!*********************************************!*\
  !*** ./app/api/generate-itinerary/route.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   maxDuration: () => (/* binding */ maxDuration),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _job_processor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../job-processor */ \"(rsc)/./app/api/job-processor.ts\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/supabase */ \"(rsc)/./lib/supabase.ts\");\n\n\n\n// Configure runtime for serverless function\nconst runtime = \"nodejs\";\nconst maxDuration = 60; // Set max duration to 60 seconds\n// Use API key from environment variables\nconst OPENAI_API_KEY = process.env.OPENAI_API_KEY || \"\";\n// Check if running in production environment\nconst isProduction = \"development\" === \"production\";\n// Check if Supabase is properly configured\nconst isSupabaseConfigured = Boolean( true && \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvYWlla3F3ZmxvandpY2Vqdm5lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ5MzM2MzMsImV4cCI6MjA2MDUwOTYzM30.E70hBHGjbvCJPjYpMmlMIMvyfyBlotOwP01YaXf37Mg\");\nasync function POST(request) {\n    try {\n        // Log environment variables (without exposing actual values)\n        console.log(\"Supabase connection check:\", {\n            hasSupabaseUrl: !!\"https://toaiekqwflojwicejvne.supabase.co\",\n            hasSupabaseKey: !!\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvYWlla3F3ZmxvandpY2Vqdm5lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ5MzM2MzMsImV4cCI6MjA2MDUwOTYzM30.E70hBHGjbvCJPjYpMmlMIMvyfyBlotOwP01YaXf37Mg\",\n            urlLength: \"https://toaiekqwflojwicejvne.supabase.co\"?.length || 0,\n            keyLength: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvYWlla3F3ZmxvandpY2Vqdm5lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ5MzM2MzMsImV4cCI6MjA2MDUwOTYzM30.E70hBHGjbvCJPjYpMmlMIMvyfyBlotOwP01YaXf37Mg\"?.length || 0\n        });\n        // Only test Supabase connection if properly configured\n        if (isSupabaseConfigured) {\n            try {\n                const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from(\"jobs\").select(\"count\").limit(1);\n                if (error) {\n                    console.error(\"Supabase connection test failed:\", {\n                        message: error.message,\n                        hint: error.hint || \"\",\n                        code: error.code || \"\"\n                    });\n                // Continue execution despite connection error\n                // The job will be stored in memory\n                } else {\n                    console.log(\"Supabase connection test successful:\", data);\n                }\n            } catch (connError) {\n                console.error(\"Supabase connection test exception:\", {\n                    message: connError.message,\n                    details: connError.toString(),\n                    hint: \"\",\n                    code: \"\"\n                });\n            // Continue execution despite connection error\n            // The job will be stored in memory\n            }\n        } else {\n            console.log(\"Skipping Supabase connection test - not configured\");\n        }\n        // Parse the request body\n        const surveyData = await request.json();\n        // Create a unique job ID\n        const jobId = (0,_job_processor__WEBPACK_IMPORTED_MODULE_1__.generateJobId)();\n        // If we're in development or testing, return mock data immediately\n        if ( true && !OPENAI_API_KEY.startsWith(\"sk-\")) {\n            console.log(\"Development mode: Returning mock data\");\n            const mockItinerary = createMockItinerary(surveyData);\n            const updateResult = await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_2__.updateJobStatus)(jobId, \"completed\", {\n                result: {\n                    itinerary: mockItinerary,\n                    prompt: generatePrompt(surveyData)\n                }\n            });\n            if (!updateResult) {\n                console.error(\"Failed to update job status in development mode\");\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Failed to update job status\"\n                }, {\n                    status: 500\n                });\n            }\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                jobId,\n                status: \"completed\"\n            });\n        }\n        // Create a new job\n        console.log(\"Creating new job with ID:\", jobId);\n        const jobCreated = await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_2__.createJob)(jobId);\n        if (!jobCreated) {\n            console.error(\"Failed to create job\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Failed to create job in database\"\n            }, {\n                status: 500\n            });\n        }\n        // Start processing in the background without awaiting\n        console.log(`Starting background processing for job ${jobId}...`);\n        setTimeout(async ()=>{\n            try {\n                console.log(`Background processing started for job ${jobId}`);\n                // First update to processing status to indicate we've started\n                await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_2__.updateJobStatus)(jobId, \"processing\");\n                // Process the job\n                await (0,_job_processor__WEBPACK_IMPORTED_MODULE_1__.processItineraryJob)(jobId, surveyData, generatePrompt, OPENAI_API_KEY);\n                console.log(`Background processing completed successfully for job ${jobId}`);\n            } catch (error) {\n                console.error(`Background processing error for job ${jobId}:`, error);\n                // Make extra sure we update the job status on error\n                try {\n                    await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_2__.updateJobStatus)(jobId, \"failed\", {\n                        error: error.message || \"Internal server error\"\n                    });\n                } catch (updateError) {\n                    console.error(`Failed to update job status after error for ${jobId}:`, updateError);\n                }\n            }\n        }, 100); // Small delay to ensure job is created first\n        // Return immediately with the job ID\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            jobId,\n            status: \"queued\",\n            message: \"Your itinerary is being generated. Poll the job-status endpoint for updates.\"\n        });\n    } catch (error) {\n        console.error(\"Error initiating itinerary generation:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: `Failed to initiate itinerary generation: ${error.message || \"Unknown error\"}`\n        }, {\n            status: 500\n        });\n    }\n}\n// Function to generate a prompt based on survey data\nfunction generatePrompt(surveyData) {\n    // Calculate trip duration - adding 1 to include both start and end date\n    const startDate = new Date(surveyData.startDate);\n    const endDate = new Date(surveyData.endDate);\n    // Set time to noon to avoid timezone issues\n    startDate.setHours(12, 0, 0, 0);\n    endDate.setHours(12, 0, 0, 0);\n    // Calculate days including both start and end date\n    // Using Math.floor instead of Math.round and adding 1 to include both start and end date\n    const diffTime = endDate.getTime() - startDate.getTime();\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n    const durationDays = diffDays + 1; // Add 1 to include both start and end date\n    console.log(\"Date calculation:\", {\n        startDate: surveyData.startDate,\n        endDate: surveyData.endDate,\n        startTimestamp: startDate.getTime(),\n        endTimestamp: endDate.getTime(),\n        diffTime,\n        diffDays,\n        durationDays\n    });\n    // Format preferences\n    const preferencesText = surveyData.preferences.length > 0 ? `They particularly enjoy ${surveyData.preferences.join(\", \")}.` : \"\";\n    // Format budget level\n    let budgetLevel = \"\";\n    switch(surveyData.budget){\n        case \"budget\":\n            budgetLevel = \"budget-friendly options, looking for economical accommodations, affordable dining, and free or low-cost activities\";\n            break;\n        case \"moderate\":\n            budgetLevel = \"mid-range options, with comfortable accommodations, good quality restaurants, and a mix of paid and free activities\";\n            break;\n        case \"luxury\":\n            budgetLevel = \"high-end options, with luxury accommodations, fine dining, and premium experiences\";\n            break;\n        default:\n            budgetLevel = \"a mix of affordable and premium options\";\n    }\n    // Format trip purpose\n    let purposeText = \"\";\n    switch(surveyData.purpose){\n        case \"vacation\":\n            purposeText = \"a relaxing vacation\";\n            break;\n        case \"honeymoon\":\n            purposeText = \"their honeymoon, so include romantic activities and settings\";\n            break;\n        case \"family\":\n            purposeText = \"a family trip, so include family-friendly activities\";\n            break;\n        case \"solo\":\n            purposeText = \"a solo adventure, with opportunities for both exploration and meeting people\";\n            break;\n        case \"business\":\n            purposeText = \"a business trip with some leisure time\";\n            break;\n        case \"weekend\":\n            purposeText = \"a quick weekend getaway\";\n            break;\n        case \"roadtrip\":\n            purposeText = \"a road trip, including notable stops and routes\";\n            break;\n        default:\n            purposeText = \"a vacation\";\n    }\n    // Construct the prompt\n    const prompt = `\nCreate a detailed ${durationDays}-day travel itinerary for a trip to ${surveyData.destination} from ${formatDate(startDate)} to ${formatDate(endDate)}.\n\nThis trip is for ${purposeText}. ${preferencesText} The traveler is looking for ${budgetLevel}.\n\nIMPORTANT: You MUST create exactly ${durationDays} days in the itinerary, with dates from ${surveyData.startDate} to ${surveyData.endDate} inclusive.\n\nFor each day, provide:\n1. Morning activity or attraction with: name, description, location, approximate cost\n2. Lunch recommendation with: restaurant name, cuisine type, price range\n3. Afternoon activity or attraction with: name, description, location, approximate cost\n4. Dinner recommendation with: restaurant name, cuisine type, price range\n5. Evening activity (if applicable) with: name, description, location, approximate cost\n\nAlso include:\n- Recommended accommodation options with estimated nightly rates\n- Transportation suggestions within the destination\n- Total estimated budget breakdown for accommodation, food, activities, and transport\n\nReturn this as a JSON object exactly as shown below. Do not include any markdown formatting, code blocks, or additional text. Use ONLY double quotes for all property names and string values - never use single quotes.\n\n{\n  \"title\": \"Trip title\",\n  \"destination\": \"Destination name\",\n  \"dates\": {\n    \"start\": \"YYYY-MM-DD\",\n    \"end\": \"YYYY-MM-DD\"\n  },\n  \"days\": [\n    {\n      \"date\": \"YYYY-MM-DD\",\n      \"activities\": [\n        {\n          \"id\": \"unique-id\",\n          \"time\": \"Morning/Afternoon/Evening\",\n          \"title\": \"Activity name\",\n          \"description\": \"Detailed description\",\n          \"location\": \"Address or area\",\n          \"coordinates\": { \"lat\": 41.3851, \"lng\": 2.1734 },\n          \"cost\": 0\n        }\n      ]\n    }\n  ],\n  \"accommodation\": [\n    {\n      \"name\": \"Accommodation name\",\n      \"description\": \"Description\",\n      \"location\": \"Address\",\n      \"pricePerNight\": 0\n    }\n  ],\n  \"transportation\": [\n    {\n      \"type\": \"Type of transport\",\n      \"description\": \"Description\",\n      \"estimatedCost\": 0\n    }\n  ],\n  \"budget\": {\n    \"accommodation\": 0,\n    \"food\": 0,\n    \"activities\": 0,\n    \"transport\": 0,\n    \"total\": 0\n  }\n}\n\nEnsure all costs are in USD and are realistic estimates. For coordinates, use approximate latitude and longitude for each location. Remember to provide a properly formatted JSON response with all property names in double quotes.\n`;\n    return prompt;\n}\n// Helper function to format dates\nfunction formatDate(date) {\n    return date.toLocaleDateString(\"en-US\", {\n        weekday: \"long\",\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\"\n    });\n}\n// Create mock itinerary data for development\nfunction createMockItinerary(surveyData) {\n    const startDate = new Date(surveyData.startDate);\n    const endDate = new Date(surveyData.endDate);\n    // Set time to noon to avoid timezone issues\n    startDate.setHours(12, 0, 0, 0);\n    endDate.setHours(12, 0, 0, 0);\n    // Calculate days including both start and end date\n    // Using Math.floor instead of Math.round and adding 1 to include both start and end date\n    const diffTime = endDate.getTime() - startDate.getTime();\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n    const durationDays = diffDays + 1; // Add 1 to include both start and end date\n    console.log(\"Mock Date calculation:\", {\n        startDate: surveyData.startDate,\n        endDate: surveyData.endDate,\n        diffTime,\n        diffDays,\n        durationDays\n    });\n    const days = [];\n    // Generate mock days\n    for(let i = 0; i < durationDays; i++){\n        const currentDate = new Date(startDate);\n        currentDate.setDate(startDate.getDate() + i);\n        days.push({\n            date: currentDate.toISOString().split(\"T\")[0],\n            activities: [\n                {\n                    id: `act-${i}-1`,\n                    time: \"Morning\",\n                    title: `Explore ${surveyData.destination} - Day ${i + 1} Morning`,\n                    description: \"Start your day with a visit to a popular local attraction.\",\n                    location: `${surveyData.destination} City Center`,\n                    coordinates: {\n                        lat: 40.7128,\n                        lng: -74.0060\n                    },\n                    cost: 25\n                },\n                {\n                    id: `act-${i}-2`,\n                    time: \"Afternoon\",\n                    title: `${surveyData.destination} Afternoon Activity`,\n                    description: \"Enjoy a relaxing afternoon activity based on your preferences.\",\n                    location: `${surveyData.destination} Park`,\n                    coordinates: {\n                        lat: 40.7828,\n                        lng: -73.9654\n                    },\n                    cost: 15\n                },\n                {\n                    id: `act-${i}-3`,\n                    time: \"Evening\",\n                    title: `${surveyData.destination} Night Experience`,\n                    description: \"Experience the local nightlife and culture.\",\n                    location: `${surveyData.destination} Entertainment District`,\n                    coordinates: {\n                        lat: 40.7590,\n                        lng: -73.9845\n                    },\n                    cost: 50\n                }\n            ]\n        });\n    }\n    // Create mock budget based on preferences\n    let accommodationCost = 0;\n    switch(surveyData.budget){\n        case \"budget\":\n            accommodationCost = 75;\n            break;\n        case \"moderate\":\n            accommodationCost = 150;\n            break;\n        case \"luxury\":\n            accommodationCost = 300;\n            break;\n        default:\n            accommodationCost = 150;\n    }\n    const totalAccommodation = accommodationCost * durationDays;\n    const totalFood = 60 * durationDays;\n    const totalActivities = 90 * durationDays;\n    const totalTransport = 30 * durationDays;\n    return {\n        title: `${surveyData.destination} ${surveyData.purpose.charAt(0).toUpperCase() + surveyData.purpose.slice(1)} Trip`,\n        destination: surveyData.destination,\n        dates: {\n            start: surveyData.startDate,\n            end: surveyData.endDate\n        },\n        days,\n        accommodation: [\n            {\n                name: `${surveyData.destination} Hotel`,\n                description: \"A comfortable hotel in a convenient location.\",\n                location: `Central ${surveyData.destination}`,\n                pricePerNight: accommodationCost\n            },\n            {\n                name: `${surveyData.destination} Boutique Stay`,\n                description: \"A charming boutique accommodation with local character.\",\n                location: `Historic District, ${surveyData.destination}`,\n                pricePerNight: accommodationCost * 1.2\n            }\n        ],\n        transportation: [\n            {\n                type: \"Public Transit\",\n                description: \"Convenient and affordable public transportation network.\",\n                estimatedCost: totalTransport * 0.5\n            },\n            {\n                type: \"Taxi/Rideshare\",\n                description: \"On-demand rides for convenience.\",\n                estimatedCost: totalTransport * 0.5\n            }\n        ],\n        budget: {\n            accommodation: totalAccommodation,\n            food: totalFood,\n            activities: totalActivities,\n            transport: totalTransport,\n            total: totalAccommodation + totalFood + totalActivities + totalTransport\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/generate-itinerary/route.ts\n");

/***/ }),

/***/ "(rsc)/./app/api/job-processor.ts":
/*!**********************************!*\
  !*** ./app/api/job-processor.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateJobId: () => (/* binding */ generateJobId),\n/* harmony export */   processItineraryJob: () => (/* binding */ processItineraryJob)\n/* harmony export */ });\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/supabase */ \"(rsc)/./lib/supabase.ts\");\n\n// Helper function to generate a unique job ID\nfunction generateJobId() {\n    return \"job_\" + Date.now() + \"_\" + Math.random().toString(36).substring(2, 15);\n}\n// Process the itinerary generation in the background\nasync function processItineraryJob(jobId, surveyData, generatePrompt, OPENAI_API_KEY) {\n    try {\n        console.log(`[${jobId}] Starting itinerary generation process...`);\n        // Update status to processing (already done in the caller, but make sure)\n        await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.updateJobStatus)(jobId, \"processing\");\n        // Create the prompt for GPT\n        const prompt = generatePrompt(surveyData);\n        console.log(`[${jobId}] Generated prompt (${prompt.length} chars)`);\n        // Make the OpenAI API call\n        console.log(`[${jobId}] Calling OpenAI API...`);\n        const startTime = Date.now();\n        // Check if we have a valid API key first\n        if (!OPENAI_API_KEY || !OPENAI_API_KEY.startsWith(\"sk-\")) {\n            console.error(`[${jobId}] Invalid OpenAI API key`);\n            await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.updateJobStatus)(jobId, \"failed\", {\n                error: \"Invalid OpenAI API key configuration. Please check your environment variables.\"\n            });\n            return;\n        }\n        // Create AbortController for timeout handling\n        const controller = new AbortController();\n        const timeoutId = setTimeout(()=>controller.abort(), 45000); // 45 second timeout\n        try {\n            const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${OPENAI_API_KEY}`\n                },\n                body: JSON.stringify({\n                    model: \"gpt-3.5-turbo\",\n                    messages: [\n                        {\n                            role: \"system\",\n                            content: 'You are an expert travel planner. Generate a detailed travel itinerary based on the user\\'s preferences. Return your response in a structured JSON format only, with no additional text, explanation, or markdown formatting. Do not wrap the JSON in code blocks. Ensure all property names use double quotes. IMPORTANT: Every activity MUST include a valid \"coordinates\" object with \"lat\" and \"lng\" numerical values - never omit coordinates or use empty objects. Return a valid JSON object that can be parsed with JSON.parse().'\n                        },\n                        {\n                            role: \"user\",\n                            content: prompt\n                        }\n                    ],\n                    temperature: 0.7,\n                    max_tokens: 3000\n                }),\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId); // Clear the timeout if request completes\n            const responseTime = Date.now() - startTime;\n            console.log(`[${jobId}] OpenAI API response received in ${responseTime}ms`);\n            if (!response.ok) {\n                const error = await response.json();\n                console.error(`[${jobId}] OpenAI API error:`, error);\n                await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.updateJobStatus)(jobId, \"failed\", {\n                    error: `Failed to generate itinerary: ${error.error?.message || \"API error\"}`\n                });\n                return;\n            }\n            const data = await response.json();\n            console.log(`[${jobId}] OpenAI response received with ${data.usage?.total_tokens || \"unknown\"} tokens`);\n            const itineraryContent = data.choices[0].message.content;\n            console.log(`[${jobId}] Content length: ${itineraryContent.length} characters`);\n            // Parse the JSON response with better error handling\n            try {\n                console.log(`[${jobId}] Parsing JSON response...`);\n                // Try direct parse first\n                let itinerary;\n                try {\n                    itinerary = JSON.parse(itineraryContent);\n                    console.log(`[${jobId}] JSON parsed successfully on first attempt`);\n                } catch (err) {\n                    const parseError = err;\n                    console.error(`[${jobId}] Initial JSON parse failed:`, parseError.message);\n                    // Sometimes the API might return markdown-formatted JSON with backticks or extra text\n                    // Try to extract JSON content from the response\n                    const jsonMatch = itineraryContent.match(/\\{[\\s\\S]*\\}/);\n                    if (jsonMatch) {\n                        try {\n                            console.log(`[${jobId}] Attempting to extract JSON from response...`);\n                            itinerary = JSON.parse(jsonMatch[0]);\n                            console.log(`[${jobId}] JSON extracted and parsed successfully`);\n                        } catch (err2) {\n                            const extractError = err2;\n                            console.error(`[${jobId}] Failed to extract valid JSON:`, extractError.message);\n                            // If we can't parse it, throw the original error\n                            throw parseError;\n                        }\n                    } else {\n                        console.error(`[${jobId}] No JSON object found in response`);\n                        throw parseError;\n                    }\n                }\n                // Quick validation of the itinerary\n                if (!itinerary || typeof itinerary !== \"object\") {\n                    throw new Error(\"Parsed result is not a valid object\");\n                }\n                console.log(`[${jobId}] Validating coordinates...`);\n                // Ensure coordinates exist for all activities\n                ensureValidCoordinates(itinerary);\n                console.log(`[${jobId}] Coordinates validated successfully`);\n                // Update job status with the successful result\n                console.log(`[${jobId}] Updating job status to completed...`);\n                await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.updateJobStatus)(jobId, \"completed\", {\n                    result: {\n                        itinerary,\n                        prompt\n                    }\n                });\n                console.log(`[${jobId}] Job completed successfully!`);\n            } catch (err) {\n                const parseError = err;\n                console.error(`[${jobId}] Failed to parse itinerary JSON:`, parseError);\n                console.error(`[${jobId}] Raw content sample:`, itineraryContent.substring(0, 200));\n                // Log the position where the error occurred if available\n                if (parseError instanceof SyntaxError && parseError.message.includes(\"position\")) {\n                    const positionMatch = parseError.message.match(/position (\\d+)/);\n                    if (positionMatch) {\n                        const position = parseInt(positionMatch[1]);\n                        const errorContext = itineraryContent.substring(Math.max(0, position - 30), Math.min(itineraryContent.length, position + 30));\n                        console.error(`[${jobId}] Error context around position ${position}:`, errorContext);\n                    }\n                }\n                console.log(`[${jobId}] Updating job status to failed due to parsing error...`);\n                await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.updateJobStatus)(jobId, \"failed\", {\n                    error: \"Unable to parse the generated itinerary data\",\n                    result: {\n                        rawContent: itineraryContent.substring(0, 500),\n                        errorMessage: parseError.message\n                    }\n                });\n            }\n        } catch (fetchError) {\n            clearTimeout(timeoutId);\n            if (fetchError.name === \"AbortError\") {\n                console.error(`[${jobId}] OpenAI API request timed out after 45 seconds`);\n                await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.updateJobStatus)(jobId, \"failed\", {\n                    error: \"The request to generate an itinerary timed out. Please try again.\"\n                });\n                return;\n            }\n            // Re-throw for the outer catch block to handle\n            throw fetchError;\n        }\n    } catch (error) {\n        console.error(`[${jobId}] Error processing itinerary job:`, error);\n        await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.updateJobStatus)(jobId, \"failed\", {\n            error: error.message || \"Unknown error\"\n        });\n    }\n}\n// Helper function to ensure all activities have valid coordinates\nfunction ensureValidCoordinates(itinerary) {\n    if (!itinerary.days || !Array.isArray(itinerary.days)) {\n        itinerary.days = [];\n        return;\n    }\n    console.log(\"Validating coordinates for all activities...\");\n    let issuesFixed = 0;\n    for (const day of itinerary.days){\n        if (!day.activities || !Array.isArray(day.activities)) {\n            day.activities = [];\n            continue;\n        }\n        for (const activity of day.activities){\n            // Skip if not an object\n            if (!activity || typeof activity !== \"object\") continue;\n            // Ensure coordinates exist and are properly formatted\n            if (!activity.coordinates || typeof activity.coordinates !== \"object\") {\n                console.log(`Missing coordinates for activity \"${activity.title}\", adding default coordinates`);\n                activity.coordinates = {\n                    lat: 40.7128,\n                    lng: -74.0060\n                }; // Default to NYC coordinates\n                issuesFixed++;\n            } else {\n                // Make sure lat and lng are numbers\n                let coordinateFixed = false;\n                if (typeof activity.coordinates.lat !== \"number\") {\n                    console.log(`Invalid lat coordinate for activity \"${activity.title}\": ${activity.coordinates.lat} (${typeof activity.coordinates.lat})`);\n                    activity.coordinates.lat = parseFloat(activity.coordinates.lat) || 40.7128;\n                    coordinateFixed = true;\n                    issuesFixed++;\n                }\n                if (typeof activity.coordinates.lng !== \"number\") {\n                    console.log(`Invalid lng coordinate for activity \"${activity.title}\": ${activity.coordinates.lng} (${typeof activity.coordinates.lng})`);\n                    activity.coordinates.lng = parseFloat(activity.coordinates.lng) || -74.0060;\n                    coordinateFixed = true;\n                    issuesFixed++;\n                }\n                if (coordinateFixed) {\n                    console.log(`Fixed coordinates for activity \"${activity.title}\": ${JSON.stringify(activity.coordinates)}`);\n                }\n            }\n        }\n    }\n    console.log(`Coordinates validation complete. Fixed ${issuesFixed} issues.`);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/job-processor.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createJob: () => (/* binding */ createJob),\n/* harmony export */   getJobStatus: () => (/* binding */ getJobStatus),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   updateJobStatus: () => (/* binding */ updateJobStatus)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n// Explicitly log all environment variables for debugging\nconsole.log(\"NODE_ENV:\", \"development\");\nconsole.log(\"Environment Variables Overview:\", {\n    hasProcessEnv: typeof process !== \"undefined\" && !!process.env,\n    nodeEnv: \"development\",\n    hasSbUrl: \"NEXT_PUBLIC_SUPABASE_URL\" in process.env,\n    hasSbKey: \"NEXT_PUBLIC_SUPABASE_ANON_KEY\" in process.env,\n    nextConfig: \"string\" === \"string\",\n    envVarCount: Object.keys(process.env).filter((key)=>key.startsWith(\"NEXT_\")).length\n});\n// Supabase client setup\n// Directly access variables for debugging rather than using || '' pattern initially\nlet supabaseUrl = \"https://toaiekqwflojwicejvne.supabase.co\";\nlet supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvYWlla3F3ZmxvandpY2Vqdm5lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ5MzM2MzMsImV4cCI6MjA2MDUwOTYzM30.E70hBHGjbvCJPjYpMmlMIMvyfyBlotOwP01YaXf37Mg\";\n// Debug Supabase setup without exposing keys\nconsole.log(\"Direct Supabase URL:\", supabaseUrl?.substring(0, 12) + \"...\" || 0);\nconsole.log(\"Direct Supabase Key:\", supabaseAnonKey?.substring(0, 6) + \"...\" || 0);\n// Fallback to empty string if undefined\nsupabaseUrl = supabaseUrl || \"\";\nsupabaseAnonKey = supabaseAnonKey || \"\";\n// Debug Supabase setup without exposing keys\nconsole.log(\"Supabase configuration check:\", {\n    hasUrl: Boolean(supabaseUrl),\n    urlLength: supabaseUrl?.length || 0,\n    urlPrefix: supabaseUrl?.substring(0, 8) || \"\",\n    hasKey: Boolean(supabaseAnonKey),\n    keyLength: supabaseAnonKey?.length || 0,\n    keyPrefix: supabaseAnonKey?.substring(0, 4) || \"\"\n});\n// Check if Supabase is configured properly\nconst isSupabaseConfigured = Boolean(supabaseUrl && supabaseAnonKey);\n// In-memory store to track if Supabase connectivity failed during runtime\nlet supabaseDisabled = false;\n// Initialize the Supabase client with explicit options for better reliability\nconst supabase = isSupabaseConfigured ? (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n    auth: {\n        persistSession: false,\n        autoRefreshToken: false\n    },\n    global: {\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    },\n    db: {\n        schema: \"public\"\n    }\n}) : (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://placeholder-url.supabase.co\", \"placeholder-key\", {\n    auth: {\n        persistSession: false,\n        autoRefreshToken: false\n    }\n});\n// Log initialization status\nif (!isSupabaseConfigured) {\n    console.log(\"Supabase not properly configured. Using in-memory job storage as fallback.\");\n} else {\n    console.log(\"Supabase client initialized, verifying connection...\");\n    // Attempt to verify connection and ensure the jobs table exists\n    verifySupabaseConnection().catch((err)=>{\n        console.warn(\"Failed to verify Supabase connection:\", err.message);\n    });\n}\n// In-memory fallback store for development or when Supabase isn't configured\nconst inMemoryJobs = {};\n// Function to verify the Supabase connection\nasync function verifySupabaseConnection() {\n    if (!isSupabaseConfigured) return;\n    try {\n        console.log(\"Checking Supabase connection...\");\n        // First try to directly query if the jobs table exists\n        const { data, error } = await supabase.from(\"jobs\").select(\"*\").limit(1);\n        if (error) {\n            // Table might not exist\n            if (error.code === \"42P01\") {\n                console.log(\"Jobs table does not exist, will attempt to create it\");\n                await ensureJobsTableExists();\n            } else {\n                console.error(\"Supabase connection verification failed:\", {\n                    message: error.message,\n                    code: error.code,\n                    details: error.details\n                });\n            }\n        } else {\n            console.log(\"Supabase connection verified successfully, jobs table exists\");\n            // Check to see if we have the right columns\n            await checkTableStructure(data);\n        }\n    } catch (error) {\n        console.error(\"Error verifying Supabase connection:\", {\n            message: error.message,\n            stack: error.stack?.substring(0, 200)\n        });\n        // If this is a network error, disable Supabase\n        if (error.message?.includes(\"fetch failed\") || error.message?.includes(\"network error\") || error instanceof TypeError) {\n            console.warn(\"Disabling Supabase due to connection issues\");\n            supabaseDisabled = true;\n        }\n    }\n}\n// Check and adapt to existing table structure\nasync function checkTableStructure(sampleData) {\n    if (sampleData && sampleData.length > 0) {\n        // Log the structure we found for debugging\n        const firstRow = sampleData[0];\n        console.log(\"Found existing jobs table with columns:\", Object.keys(firstRow).join(\", \"));\n    }\n}\n// Function to check and create the jobs table if it doesn't exist\nasync function ensureJobsTableExists() {\n    if (!isSupabaseConfigured) return;\n    try {\n        console.log(\"Attempting to create jobs table...\");\n        // Check if we have permission to execute SQL\n        try {\n            // First, try to create a simple table with the minimum required fields\n            const createTableSQL = `\n        CREATE TABLE IF NOT EXISTS jobs (\n          id BIGINT PRIMARY KEY,\n          status TEXT,\n          result JSONB,\n          error TEXT,\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n        );\n      `;\n            const { error: createError } = await supabase.rpc(\"execute_sql\", {\n                sql: createTableSQL\n            });\n            if (createError) {\n                console.error(\"Failed to create jobs table via SQL:\", createError);\n                // Try an alternative approach - using the insert API\n                console.log(\"Trying to create jobs table via insert...\");\n                const { error: insertError } = await supabase.from(\"jobs\").insert({\n                    id: 0,\n                    status: \"test\",\n                    result: null,\n                    error: null,\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                });\n                if (insertError) {\n                    // If Supabase doesn't let us create the table, log what needs to be created\n                    console.error(\"Cannot create jobs table automatically:\", insertError);\n                    console.error(\"Please create the jobs table manually with this SQL:\");\n                    console.error(createTableSQL);\n                } else {\n                    console.log(\"Jobs table created successfully through insert\");\n                    // Clean up test record\n                    await supabase.from(\"jobs\").delete().eq(\"id\", 0);\n                }\n            } else {\n                console.log(\"Jobs table created successfully through SQL\");\n            }\n        } catch (sqlError) {\n            console.error(\"Error executing SQL:\", sqlError.message);\n        }\n    } catch (error) {\n        console.error(\"Error ensuring jobs table exists:\", error.message);\n    // This error is handled gracefully, we'll just use in-memory storage\n    }\n}\n// Convert string ID to a numeric hash if needed for Supabase compatibility\nfunction getDbCompatibleId(id) {\n    // If the ID is already numeric, return it as is\n    if (!isNaN(Number(id))) {\n        return Number(id);\n    }\n    // Simple hash function to convert string to number \n    // This helps if Supabase table requires numeric IDs\n    let hash = 0;\n    for(let i = 0; i < id.length; i++){\n        const char = id.charCodeAt(i);\n        hash = (hash << 5) - hash + char;\n        hash = hash & hash; // Convert to 32bit integer\n    }\n    // Ensure positive number by using absolute value\n    return Math.abs(hash);\n}\n// Check if Supabase should be used\nfunction shouldUseSupabase() {\n    return isSupabaseConfigured && !supabaseDisabled;\n}\n// Handle Supabase errors consistently\nfunction handleSupabaseError(error) {\n    console.error(\"Supabase operation failed:\", {\n        message: error.message,\n        name: error.name,\n        code: error.code,\n        hint: error.hint,\n        details: error.details,\n        isTypeError: error instanceof TypeError\n    });\n    // If we get a fetch error, disable Supabase for this session\n    if (error instanceof TypeError && (error.message?.includes(\"fetch failed\") || error.message?.includes(\"network error\"))) {\n        console.warn(\"Disabling Supabase due to connectivity issues. Using in-memory storage as fallback.\");\n        supabaseDisabled = true;\n    }\n}\n// Function to create or update a job\nasync function updateJobStatus(jobId, status, data) {\n    // Create in-memory fallback entry\n    const memoryJob = {\n        id: jobId,\n        status: status,\n        result: data?.result || undefined,\n        error: data?.error || undefined,\n        created_at: inMemoryJobs[jobId]?.created_at || new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    };\n    // Save to in-memory store\n    inMemoryJobs[jobId] = memoryJob;\n    // If we shouldn't use Supabase, return early with success\n    if (!shouldUseSupabase()) {\n        return true;\n    }\n    try {\n        const dbId = getDbCompatibleId(jobId);\n        // Ensure result is properly serialized before sending to Supabase\n        let safeResult = null;\n        if (data?.result) {\n            try {\n                // Log coordinates before serialization if they exist\n                if (data.result?.itinerary?.days) {\n                    console.log(\"Checking coordinates before serialization...\");\n                    const days = data.result.itinerary.days;\n                    let hasCoordinateIssues = false;\n                    for(let i = 0; i < days.length; i++){\n                        const day = days[i];\n                        if (day.activities && Array.isArray(day.activities)) {\n                            for(let j = 0; j < day.activities.length; j++){\n                                const activity = day.activities[j];\n                                if (!activity.coordinates || typeof activity.coordinates !== \"object\") {\n                                    console.error(`Missing coordinates in day ${i}, activity ${j}: ${activity.title}`);\n                                    hasCoordinateIssues = true;\n                                } else {\n                                    if (activity.coordinates.lat === undefined || activity.coordinates.lng === undefined) {\n                                        console.error(`Incomplete coordinates in day ${i}, activity ${j}: ${JSON.stringify(activity.coordinates)}`);\n                                        hasCoordinateIssues = true;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (!hasCoordinateIssues) {\n                        console.log(\"All coordinates look valid before serialization\");\n                    }\n                }\n                // Test serialization first to catch any issues\n                JSON.stringify(data.result);\n                safeResult = data.result;\n            } catch (e) {\n                console.error(\"Failed to serialize job result to JSON:\", e);\n                safeResult = {\n                    error: \"Result contained unserializable data\"\n                };\n            }\n        }\n        console.log(`Updating job ${jobId} (dbId: ${dbId}) status to ${status}`);\n        // First, get the current job to preserve created_at\n        let created_at = memoryJob.created_at;\n        try {\n            const { data: existingJob } = await supabase.from(\"jobs\").select(\"created_at\").eq(\"id\", dbId).single();\n            if (existingJob?.created_at) {\n                created_at = existingJob.created_at;\n                console.log(`Using existing created_at timestamp: ${created_at}`);\n            } else {\n                console.log(`No existing created_at found, using default created_at: ${created_at}`);\n            }\n        } catch (err) {\n            console.log(`Could not fetch existing job, using default created_at: ${created_at}`);\n        }\n        // Now update with the preserved created_at\n        const { error } = await supabase.from(\"jobs\").upsert({\n            id: dbId,\n            status,\n            result: safeResult,\n            error: data?.error || null,\n            created_at: created_at,\n            updated_at: new Date().toISOString()\n        }, {\n            onConflict: \"id\"\n        });\n        if (error) {\n            console.error(\"Error updating job status in Supabase:\", {\n                code: error.code,\n                message: error.message,\n                details: error.details,\n                jobId,\n                dbId,\n                status\n            });\n        } else {\n            console.log(`Successfully updated job ${jobId} in Supabase`);\n        }\n    } catch (error) {\n        handleSupabaseError(error);\n    }\n    // Always return true since we saved to in-memory storage\n    return true;\n}\n// Function to fetch a job's status\nasync function getJobStatus(jobId) {\n    // Check in-memory first\n    const memoryJob = inMemoryJobs[jobId];\n    // If we shouldn't use Supabase or already have it in memory, return early\n    if (!shouldUseSupabase()) {\n        console.log(`Using in-memory job data for ${jobId}`);\n        return memoryJob || null;\n    }\n    try {\n        const dbId = getDbCompatibleId(jobId);\n        console.log(`Fetching job ${jobId} (dbId: ${dbId}) from Supabase`);\n        // Try by numeric ID\n        const { data, error } = await supabase.from(\"jobs\").select(\"*\").eq(\"id\", dbId).single();\n        if (error) {\n            console.error(\"Error fetching job from Supabase:\", {\n                code: error.code,\n                message: error.message,\n                details: error.details,\n                jobId,\n                dbId\n            });\n            return memoryJob || null;\n        }\n        if (!data) {\n            console.log(`Job ${jobId} not found in Supabase`);\n            return memoryJob || null;\n        }\n        console.log(`Successfully fetched job ${jobId} from Supabase`);\n        // Map data to JobData format\n        return {\n            id: jobId,\n            status: data.status,\n            result: data.result,\n            error: data.error,\n            created_at: data.created_at,\n            updated_at: data.updated_at\n        };\n    } catch (error) {\n        handleSupabaseError(error);\n        return memoryJob || null;\n    }\n}\n// Function to create a new job\nasync function createJob(jobId) {\n    // Create in-memory entry\n    const memoryJob = {\n        id: jobId,\n        status: \"queued\",\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    };\n    // Save to in-memory store\n    inMemoryJobs[jobId] = memoryJob;\n    // If we shouldn't use Supabase, return early with success\n    if (!shouldUseSupabase()) {\n        console.log(`Created job ${jobId} in memory only (Supabase disabled)`);\n        return true;\n    }\n    try {\n        const dbId = getDbCompatibleId(jobId);\n        console.log(`Creating job ${jobId} (dbId: ${dbId}) in Supabase`);\n        const { error } = await supabase.from(\"jobs\").insert({\n            id: dbId,\n            status: \"queued\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        });\n        if (error) {\n            console.error(\"Error creating job in Supabase:\", {\n                code: error.code,\n                message: error.message,\n                details: error.details,\n                jobId,\n                dbId\n            });\n        } else {\n            console.log(`Successfully created job ${jobId} in Supabase`);\n        }\n    } catch (error) {\n        handleSupabaseError(error);\n    }\n    // Always return true since we saved to in-memory storage\n    return true;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-itinerary%2Froute&page=%2Fapi%2Fgenerate-itinerary%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-itinerary%2Froute.ts&appDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fethanhoppe%2FDesktop%2FAItravelagent&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();
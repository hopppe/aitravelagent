"use strict";exports.id=662,exports.ids=[662],exports.modules={7435:(e,t,r)=>{r.d(t,{h:()=>d,k:()=>b});var a=r(2048),o=r.n(a),s=r(5315),n=r.n(s);let i=process.env.LOG_DIR||"logs",u=process.env.LOG_FILE||"app.log",c=process.env.LOG_LEVEL||"info";try{o().existsSync(i)||o().mkdirSync(i,{recursive:!0})}catch(e){console.error("Failed to create log directory:",e)}let l={debug:0,info:1,warn:2,error:3};function f(e,t,r,...s){if(l[e]<l[c])return;let d=new Date().toISOString(),b=s.map(e=>"object"==typeof e&&null!==e?function(e){try{let t=new WeakSet;return JSON.stringify(e,(e,r)=>{if("object"==typeof r&&null!==r){if(t.has(r))return"[Circular]";t.add(r)}return r},2)}catch(e){return`[Unformattable Object: ${e}]`}}(e):String(e)).join(" "),p=`[${d}] [${e.toUpperCase()}] [${t}] ${r} ${b}`;"error"===e?console.error(p):"warn"===e?console.warn(p):console.log(p),function(e){try{let t=n().join(i,u);if(o().existsSync(t)&&o().statSync(t).size>5242880){let e=new Date().toISOString().replace(/:/g,"-"),r=n().join(i,`${u}.${e}.backup`);o().renameSync(t,r)}(0,a.appendFileSync)(t,e+"\n")}catch(e){console.error("Failed to write to log file:",e)}}(p)}function d(e){return{debug:(t,...r)=>f("debug",e,t,...r),info:(t,...r)=>f("info",e,t,...r),warn:(t,...r)=>f("warn",e,t,...r),error:(t,...r)=>f("error",e,t,...r)}}let b=d("app")},5662:(e,t,r)=>{r.d(t,{Cq:()=>S,L2:()=>y,OQ:()=>c,WC:()=>j,jW:()=>h,si:()=>w,z0:()=>I});var a=r(1518);let o=(0,r(7435).h)("supabase");o.info("Supabase initialization",{NODE_ENV:"production",hasProcessEnv:"undefined"!=typeof process&&!!process.env,nodeEnv:"production",hasSbUrl:"NEXT_PUBLIC_SUPABASE_URL"in process.env,hasSbKey:"NEXT_PUBLIC_SUPABASE_ANON_KEY"in process.env,nextConfig:!0,envVarCount:Object.keys(process.env).filter(e=>e.startsWith("NEXT_")).length});let s="https://toaiekqwflojwicejvne.supabase.co",n="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvYWlla3F3ZmxvandpY2Vqdm5lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ5MzM2MzMsImV4cCI6MjA2MDUwOTYzM30.E70hBHGjbvCJPjYpMmlMIMvyfyBlotOwP01YaXf37Mg";o.debug("Supabase credentials",{urlPrefix:s?.substring(0,12)+"...",keyPrefix:n?.substring(0,6)+"..."}),s=s||"",n=n||"",o.info("Supabase configuration check",{hasUrl:!!s,urlLength:s?.length||0,urlPrefix:s?.substring(0,8)||"",hasKey:!!n,keyLength:n?.length||0,keyPrefix:n?.substring(0,4)||""});let i=!!(s&&n),u=!1,c=i?(0,a.eI)(s,n,{auth:{persistSession:!1,autoRefreshToken:!1},global:{headers:{"Content-Type":"application/json"}},db:{schema:"public"}}):(0,a.eI)("https://placeholder-url.supabase.co","placeholder-key",{auth:{persistSession:!1,autoRefreshToken:!1}});i?(o.info("Supabase client initialized, verifying connection..."),f().catch(e=>{o.error("Failed to verify Supabase connection:",e.message)})):o.warn("Supabase not properly configured. Using in-memory job storage as fallback.");let l={};async function f(){if(i)try{o.info("Checking Supabase connection...");let{data:e,error:t}=await c.from("jobs").select("*").limit(1);t?"42P01"===t.code?(o.warn("Jobs table does not exist, will attempt to create it"),await b()):o.error("Supabase connection verification failed:",{message:t.message,code:t.code,details:t.details}):(o.info("Supabase connection verified successfully, jobs table exists"),await d(e))}catch(e){o.error("Error verifying Supabase connection:",{message:e.message,stack:e.stack?.substring(0,200)}),(e.message?.includes("fetch failed")||e.message?.includes("network error")||e instanceof TypeError)&&(o.warn("Disabling Supabase due to connection issues"),u=!0)}}async function d(e){if(e&&e.length>0){let t=e[0];o.debug("Found existing jobs table with columns:",Object.keys(t).join(", "))}}async function b(){if(i)try{o.info("Attempting to create jobs table...");try{let e=`
        CREATE TABLE IF NOT EXISTS jobs (
          id BIGINT PRIMARY KEY,
          status TEXT,
          result JSONB,
          error TEXT,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
      `,{error:t}=await c.rpc("execute_sql",{sql:e});if(t){o.error("Failed to create jobs table via SQL:",t),o.info("Trying to create jobs table via insert...");let{error:r}=await c.from("jobs").insert({id:0,status:"test",result:null,error:null,created_at:new Date().toISOString(),updated_at:new Date().toISOString()});r?(o.error("Cannot create jobs table automatically:",r),o.error("Please create the jobs table manually with this SQL:"),o.error(e)):(o.info("Jobs table created successfully through insert"),await c.from("jobs").delete().eq("id",0))}else o.info("Jobs table created successfully through SQL")}catch(e){o.error("Error executing SQL:",e.message)}}catch(e){o.error("Error ensuring jobs table exists:",e)}}function p(e){if(!isNaN(Number(e)))return Number(e);let t=e.match(/^(job|debug|test)_(\d+)/);if(t&&!isNaN(Number(t[2])))return Number(t[2]);let r=0;for(let t=0;t<e.length;t++)r=Math.imul(r,31)+e.charCodeAt(t)|0;return Math.abs(r)}function g(){return i&&!u}function m(e){o.error("Supabase operation failed:",{message:e.message,code:e.code,details:e.details||e.stack?.substring(0,200)}),(e.message?.includes("fetch failed")||e.message?.includes("network error")||e instanceof TypeError)&&(o.warn("Disabling Supabase due to connection issues"),u=!0)}async function y(e,t,r){let a=new Date().toISOString(),s=p(e);if(o.info(`Updating job status: ${e} -> ${t}`,{dbId:s,hasResult:!!r?.result,hasError:!!r?.error}),g())try{let n={status:t,updated_at:a};r&&(void 0!==r.result&&(n.result=r.result),void 0!==r.error&&(n.error=r.error)),o.debug(`Supabase update job ${e} with data:`,n);let i=0,u=!1;for(;i<3&&!u;){let{error:r}=await c.from("jobs").update(n).eq("id",s);if(r){if(o.warn(`Failed to update job status (attempt ${i+1}):`,r),++i<3)await new Promise(e=>setTimeout(e,200*Math.pow(2,i)));else{m(r);break}}else o.info(`Job ${e} status updated successfully to ${t}`),u=!0}return u}catch(t){m(t),o.info(`Falling back to in-memory storage for job ${e}`)}return l[e]?(l[e].status=t,l[e].updated_at=a):l[e]={id:e,status:t,updated_at:a},r&&(void 0!==r.result&&(l[e].result=r.result),void 0!==r.error&&(l[e].error=r.error)),o.info(`Updated in-memory job ${e} status to ${t}`),!0}async function h(e){let t=p(e);if(o.info(`Getting status for job: ${e} (db id: ${t})`),g())try{o.debug(`Querying Supabase for job ${e}`);let r=0;for(;r<3;){let{data:a,error:s}=await c.from("jobs").select("status, result, error, updated_at").eq("id",t).single();if(s){if(o.warn(`Failed to get job status (attempt ${r+1}):`,s),++r<3)await new Promise(e=>setTimeout(e,200*Math.pow(2,r)));else{m(s);break}}else{if(a)return o.info(`Job ${e} status retrieved: ${a.status}`,{hasResult:!!a.result,hasError:!!a.error,updatedAt:a.updated_at}),{status:a.status,result:a.result,error:a.error};o.warn(`Job ${e} not found in database`);break}}o.info(`Supabase lookup failed, checking in-memory storage for job ${e}`)}catch(t){m(t),o.info(`Falling back to in-memory storage for job ${e} after error`)}return l[e]?(o.info(`Found job ${e} in memory with status: ${l[e].status}`),{status:l[e].status,result:l[e].result,error:l[e].error}):(o.warn(`Job ${e} not found in any storage`),{status:"not_found"})}async function S(e){let t=p(e),r=new Date().toISOString();if(o.info(`Creating new job: ${e} (db id: ${t})`),g())try{let a=0,s=!1;for(;a<3&&!s;){let{error:n}=await c.from("jobs").insert({id:t,status:"queued",created_at:r,updated_at:r});if(n){if(o.warn(`Failed to create job (attempt ${a+1}):`,n),++a<3)await new Promise(e=>setTimeout(e,200*Math.pow(2,a)));else{m(n);break}}else o.info(`Job ${e} created successfully`),s=!0}if(s)return!0;o.info("Supabase job creation failed after retries, falling back to in-memory")}catch(t){m(t),o.info(`Falling back to in-memory storage for job ${e} creation`)}return l[e]={id:e,status:"queued",created_at:r,updated_at:r},o.info(`Created in-memory job ${e}`),!0}function j(){return{...l}}async function w(){if(g())try{o.debug("Counting jobs by status from Supabase");let{data:e,error:t}=await c.from("jobs").select("status").order("created_at",{ascending:!1}).limit(500);if(t)m(t);else if(e){let t={};return e.forEach(e=>{t[e.status]=(t[e.status]||0)+1}),o.info("Job count by status:",t),t}}catch(e){m(e)}let e={};return Object.values(l).forEach(t=>{e[t.status]=(e[t.status]||0)+1}),o.info("In-memory job count by status:",e),e}async function I(e=50){if(g())try{o.debug(`Fetching ${e} recent jobs from Supabase`);let{data:t,error:r}=await c.from("jobs").select("*").order("created_at",{ascending:!1}).limit(e);if(r)m(r);else if(t)return o.info(`Retrieved ${t.length} recent jobs from Supabase`),t}catch(e){m(e)}let t=Object.values(l).sort((e,t)=>(t.created_at||"").localeCompare(e.created_at||"")).slice(0,e);return o.info(`Retrieved ${t.length} recent jobs from in-memory storage`),t}}};